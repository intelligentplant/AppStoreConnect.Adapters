#nullable enable
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdAverage = "AVG" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdCount = "COUNT" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdDelta = "DELTA" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdInterpolate = "INTERP" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdMaximum = "MAX" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdMinimum = "MIN" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdPercentBad = "PERCENTBAD" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdPercentGood = "PERCENTGOOD" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdRange = "RANGE" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdStandardDeviation = "STDDEV" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdTimeAverage = "TIMEAVERAGE" -> string!
const DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants.FunctionIdVariance = "VARIANCE" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.Partial = "Partial" -> string!
DataCore.Adapter.AdapterBase.AdapterBase(string! id, DataCore.Adapter.AdapterOptions! options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> void
DataCore.Adapter.AdapterBase.AdapterBase(string! id, Microsoft.Extensions.Options.IOptions<DataCore.Adapter.AdapterOptions!>! options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> void
DataCore.Adapter.AdapterBase.AdapterBase(string! id, Microsoft.Extensions.Options.IOptionsMonitor<DataCore.Adapter.AdapterOptions!>! optionsMonitor, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> void
DataCore.Adapter.AdapterBase.AdapterBase(string! id, string? name, string? description, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> void
DataCore.Adapter.AdapterBase<TAdapterOptions>.AdapterBase(string! id, Microsoft.Extensions.Options.IOptions<TAdapterOptions!>! options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory = null) -> void
DataCore.Adapter.AdapterBase<TAdapterOptions>.AdapterBase(string! id, Microsoft.Extensions.Options.IOptionsMonitor<TAdapterOptions!>! optionsMonitor, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> void
DataCore.Adapter.AdapterBase<TAdapterOptions>.AdapterBase(string! id, TAdapterOptions! options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> void
DataCore.Adapter.DefaultAdapterCallContext.DefaultAdapterCallContext(System.Security.Claims.ClaimsPrincipal? user = null, string? connectionId = null, string? correlationId = null, System.Globalization.CultureInfo? cultureInfo = null, System.IServiceProvider? serviceProvider = null) -> void
DataCore.Adapter.DefaultAdapterCallContext.Services.get -> System.IServiceProvider!
DataCore.Adapter.Diagnostics.ConfigurationChanges.ConfigurationChanges(DataCore.Adapter.Diagnostics.ConfigurationChangesOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.Diagnostics.ConfigurationChanges!>? logger) -> void
DataCore.Adapter.Events.EventMessagePush.EventMessagePush(DataCore.Adapter.Events.EventMessagePushOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.Events.EventMessagePush!>? logger) -> void
DataCore.Adapter.Events.EventMessagePushWithTopics.EventMessagePushWithTopics(DataCore.Adapter.Events.EventMessagePushWithTopicsOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.Events.EventMessagePushWithTopics!>? logger) -> void
DataCore.Adapter.Events.InMemoryEventMessageStore.InMemoryEventMessageStore(DataCore.Adapter.Events.InMemoryEventMessageStoreOptions? options = null, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory = null) -> void
DataCore.Adapter.Extensions.CustomFunctions.CustomFunctions(System.Uri! baseUri, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Text.Json.JsonSerializerOptions? jsonOptions = null, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.Extensions.CustomFunctions!>? logger = null) -> void
DataCore.Adapter.RealTimeData.DefaultDataFunctions
DataCore.Adapter.RealTimeData.DefaultDataFunctions.Constants
DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePush.PollingSnapshotTagValuePush(DataCore.Adapter.RealTimeData.IReadSnapshotTagValues! readSnapshotFeature, DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePushOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePush!>? logger) -> void
DataCore.Adapter.RealTimeData.SnapshotTagValueManager.SnapshotTagValueManager(DataCore.Adapter.RealTimeData.SnapshotTagValueManagerOptions? options = null, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, DataCore.Adapter.Services.IKeyValueStore? keyValueStore = null, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.RealTimeData.SnapshotTagValueManager!>? logger = null) -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePush.SnapshotTagValuePush(DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.RealTimeData.SnapshotTagValuePush!>? logger) -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.SnapshotTagValuePushBase(DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase!>? logger) -> void
DataCore.Adapter.RealTimeData.TagValueBuilder.WithSteppedTransition(bool stepped) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.Utilities.PostBoundaryInfo
DataCore.Adapter.RealTimeData.Utilities.PostBoundaryInfo.BestQualityValue.get -> DataCore.Adapter.RealTimeData.TagValueExtended?
DataCore.Adapter.RealTimeData.Utilities.PostBoundaryInfo.BoundaryStatus.get -> DataCore.Adapter.RealTimeData.TagValueStatus
DataCore.Adapter.RealTimeData.Utilities.PostBoundaryInfo.ClosestValue.get -> DataCore.Adapter.RealTimeData.TagValueExtended?
DataCore.Adapter.RealTimeData.Utilities.PostBoundaryInfo.PostBoundaryInfo() -> void
DataCore.Adapter.RealTimeData.Utilities.PreBoundaryInfo
DataCore.Adapter.RealTimeData.Utilities.PreBoundaryInfo.BestQualityValue.get -> DataCore.Adapter.RealTimeData.TagValueExtended?
DataCore.Adapter.RealTimeData.Utilities.PreBoundaryInfo.BoundaryStatus.get -> DataCore.Adapter.RealTimeData.TagValueStatus
DataCore.Adapter.RealTimeData.Utilities.PreBoundaryInfo.ClosestValue.get -> DataCore.Adapter.RealTimeData.TagValueExtended?
DataCore.Adapter.RealTimeData.Utilities.PreBoundaryInfo.PreBoundaryInfo() -> void
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.AfterEndBoundary.get -> DataCore.Adapter.RealTimeData.Utilities.PostBoundaryInfo!
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.AfterStartBoundary.get -> DataCore.Adapter.RealTimeData.Utilities.PostBoundaryInfo!
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.BeforeEndBoundary.get -> DataCore.Adapter.RealTimeData.Utilities.PreBoundaryInfo!
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.BeforeStartBoundary.get -> DataCore.Adapter.RealTimeData.Utilities.PreBoundaryInfo!
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.SubscriptionManager(TOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> void
DataCore.Adapter.Tags.TagManager.TagManager(DataCore.Adapter.Services.IKeyValueStore? keyValueStore = null, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.AdapterProperty!>? tagPropertyDefinitions = null, System.Func<DataCore.Adapter.Diagnostics.ConfigurationChange!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>? onConfigurationChange = null, Microsoft.Extensions.Logging.ILogger<DataCore.Adapter.Tags.TagManager!>? logger = null) -> void
static DataCore.Adapter.AdapterAccessorExtensions.GetAdapterDescriptorAsync(this DataCore.Adapter.IAdapterAccessor! adapterAccessor, DataCore.Adapter.IAdapterCallContext! context, string! adapterId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<DataCore.Adapter.Common.AdapterDescriptorExtended?>!
static DataCore.Adapter.ChannelExtensions.ToEnumerable<T>(this System.Collections.Generic.IAsyncEnumerable<T>! enumerable, int maxItems, int expectedItems, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.Average.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.Count.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.Delta.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.FindById(string! id) -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor?
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.Interpolate.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.Maximum.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.Minimum.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.PercentBad.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.PercentGood.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.Range.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.StandardDeviation.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.TimeAverage.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.RealTimeData.DefaultDataFunctions.Variance.get -> DataCore.Adapter.RealTimeData.DataFunctionDescriptor!
static DataCore.Adapter.Security.CertificateUtilities.TryLoadCertificateFromStore(string! path, bool requirePrivateKey, bool allowInvalid, out System.Security.Cryptography.X509Certificates.X509Certificate2? certificate) -> bool
