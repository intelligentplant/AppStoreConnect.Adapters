using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Text;
using DataCore.Adapter.Events.Utilities;

namespace DataCore.Adapter.Events.Models {

    /// <summary>
    /// Describes a message generated by e.g. an alarms &amp; events system.
    /// </summary>
    public sealed class EventMessage {

        /// <summary>
        /// A unique identifier for the event.
        /// </summary>
        public string Id { get; }

        /// <summary>
        /// The UTC timestamp of the event.
        /// </summary>
        public DateTime UtcEventTime { get; }

        /// <summary>
        /// The priority associated with the event.
        /// </summary>
        public EventPriority Priority { get; }

        /// <summary>
        /// The event category.
        /// </summary>
        public string Category { get; }

        /// <summary>
        /// The event message.
        /// </summary>
        public string Message { get; }

        /// <summary>
        /// Additional event properties.
        /// </summary>
        public IDictionary<string, string> Properties { get; private set; }


        /// <summary>
        /// Creates a new <see cref="EventMessage"/> object.
        /// </summary>
        /// <param name="id">
        ///   The unique identifier for the event message.
        /// </param>
        /// <param name="utcEventTime">
        ///   The UTC timestamp of the event.
        /// </param>
        /// <param name="priority">
        ///   The event priority.
        /// </param>
        /// <param name="category">
        ///   The event category.
        /// </param>
        /// <param name="message">
        ///   The event message.
        /// </param>
        /// <param name="properties">
        ///   Additional event properties.
        /// </param>
        public EventMessage(string id, DateTime utcEventTime, EventPriority priority, string category, string message, IDictionary<string, string> properties) {
            Id = id ?? Guid.NewGuid().ToString();
            UtcEventTime = utcEventTime.ToUniversalTime();
            Priority = priority;
            Category = category;
            Message = message;
            Properties = new ReadOnlyDictionary<string, string>(properties ?? new Dictionary<string, string>());
        }


        /// <summary>
        /// Creates a new <see cref="EventMessageBuilder"/> object that can be used to create an 
        /// <see cref="EventMessage"/> using a fluent configuration interface.
        /// </summary>
        /// <returns>
        ///   A new <see cref="EventMessageBuilder"/> object.
        /// </returns>
        public static EventMessageBuilder Create() {
            return new EventMessageBuilder();
        }


        /// <summary>
        /// Creates a new <see cref="EventMessageBuilder"/> that is configured using an existing 
        /// event message.
        /// </summary>
        /// <param name="other">
        ///   The event message to copy values from.
        /// </param>
        /// <returns>
        ///   An <see cref="EventMessageBuilder"/> with pre-configured event properties.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        ///   <paramref name="other"/> is <see langword="null"/>.
        /// </exception>
        public static EventMessageBuilder CreateFromExisting(EventMessage other) {
            if (other == null) {
                throw new ArgumentNullException(nameof(other));
            }

            return new EventMessageBuilder(other);
        }

    }
}
