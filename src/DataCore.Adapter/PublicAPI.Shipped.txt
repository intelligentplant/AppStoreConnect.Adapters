#nullable enable
abstract DataCore.Adapter.AdapterAccessor.FindAdapters(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Common.FindAdaptersRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.IAdapter!>!
abstract DataCore.Adapter.AdapterAccessor.GetAdapter(DataCore.Adapter.IAdapterCallContext! context, string! adapterId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.IAdapter?>!
abstract DataCore.Adapter.AdapterBase<TAdapterOptions>.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
abstract DataCore.Adapter.AdapterBase<TAdapterOptions>.StopAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
abstract DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.AddOrUpdateCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, DataCore.Adapter.RealTimeData.TagValueQueryResult! value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
abstract DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.GetCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<DataCore.Adapter.RealTimeData.TagValueQueryResult?>
abstract DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.RemoveCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
abstract DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.CreateAnnotationAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.CreateAnnotationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.RealTimeData.WriteTagValueAnnotationResult!>!
abstract DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.DeleteAnnotationAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.DeleteAnnotationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.RealTimeData.WriteTagValueAnnotationResult!>!
abstract DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.ReadAnnotationAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.ReadAnnotationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.RealTimeData.TagValueAnnotationExtended?>!
abstract DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.ReadAnnotationsAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.ReadAnnotationsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueAnnotationQueryResult!>!
abstract DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.UpdateAnnotationAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.UpdateAnnotationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.RealTimeData.WriteTagValueAnnotationResult!>!
abstract DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.CreateSubscriptionChannel(DataCore.Adapter.IAdapterCallContext! context, int id, int channelCapacity, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, object? state) -> TSubscription!
abstract DataCore.Adapter.Tags.TagConfigurationBase<T>.CreateTagAsync(DataCore.Adapter.IAdapterCallContext! context, T! tagConfiguration, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Tags.TagDefinition!>!
abstract DataCore.Adapter.Tags.TagConfigurationBase<T>.DeleteTagAsync(DataCore.Adapter.IAdapterCallContext! context, string! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
abstract DataCore.Adapter.Tags.TagConfigurationBase<T>.UpdateTagAsync(DataCore.Adapter.IAdapterCallContext! context, string! tag, T! tagConfiguration, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Tags.TagDefinition!>!
const DataCore.Adapter.AdapterConstants.MaxDescriptionLength = 500 -> int
const DataCore.Adapter.AdapterConstants.MaxIdLength = 100 -> int
const DataCore.Adapter.AdapterConstants.MaxNameLength = 200 -> int
const DataCore.Adapter.ChannelExtensions.AssetModelNodeChannelCapacity = 100 -> int
const DataCore.Adapter.ChannelExtensions.EventChannelCapacity = 100 -> int
const DataCore.Adapter.ChannelExtensions.TagAnnotationChannelCapacity = 100 -> int
const DataCore.Adapter.ChannelExtensions.TagDefinitionChannelCapacity = 100 -> int
const DataCore.Adapter.ChannelExtensions.TagValueChannelCapacity = 100 -> int
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.Average = "Average" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.BucketEnd = "Bucket-End" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.BucketStart = "Bucket-Start" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.Criteria = "Criteria" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.LowerBound = "Lower-Bound" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.Sigma = "Sigma" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.UpperBound = "Upper-Bound" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.Variance = "Variance" -> string!
const DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames.XPoweredBy = "X-Powered-By" -> string!
DataCore.Adapter.AdapterAccessor
DataCore.Adapter.AdapterAccessor.AdapterAccessor(DataCore.Adapter.IAdapterAuthorizationService! authorizationService) -> void
DataCore.Adapter.AdapterAccessor.AuthorizationService.get -> DataCore.Adapter.IAdapterAuthorizationService!
DataCore.Adapter.AdapterAccessor.IsAuthorized(DataCore.Adapter.IAdapter! adapter, DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
DataCore.Adapter.AdapterAccessor.MatchesFilter(DataCore.Adapter.IAdapter! adapter, DataCore.Adapter.Common.FindAdaptersRequest! request) -> bool
DataCore.Adapter.AdapterAccessorExtensions
DataCore.Adapter.AdapterBase
DataCore.Adapter.AdapterBase.AdapterBase(string! id, DataCore.Adapter.AdapterOptions! options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.AdapterBase.AdapterBase(string! id, Microsoft.Extensions.Options.IOptions<DataCore.Adapter.AdapterOptions!>! options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.AdapterBase.AdapterBase(string! id, Microsoft.Extensions.Options.IOptionsMonitor<DataCore.Adapter.AdapterOptions!>! optionsMonitor, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.AdapterBase.AdapterBase(string! id, string? name, string? description, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.AdapterBase<TAdapterOptions>
DataCore.Adapter.AdapterBase<TAdapterOptions>.AdapterBase(string! id, Microsoft.Extensions.Options.IOptions<TAdapterOptions!>! options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, Microsoft.Extensions.Logging.ILogger? logger = null) -> void
DataCore.Adapter.AdapterBase<TAdapterOptions>.AdapterBase(string! id, Microsoft.Extensions.Options.IOptionsMonitor<TAdapterOptions!>! optionsMonitor, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, Microsoft.Extensions.Logging.ILogger? logger = null) -> void
DataCore.Adapter.AdapterBase<TAdapterOptions>.AdapterBase(string! id, TAdapterOptions! options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, Microsoft.Extensions.Logging.ILogger? logger = null) -> void
DataCore.Adapter.AdapterBase<TAdapterOptions>.CheckFeatureHealthAsync(DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.Diagnostics.HealthCheckResult>!>!
DataCore.Adapter.AdapterBase<TAdapterOptions>.OnHealthStatusChanged() -> void
DataCore.Adapter.AdapterBase<TAdapterOptions>.Options.get -> TAdapterOptions!
DataCore.Adapter.AdapterBase<TAdapterOptions>.OptionsChanged -> System.Action<TAdapterOptions!>?
DataCore.Adapter.AdapterConstants
DataCore.Adapter.AdapterOptions
DataCore.Adapter.AdapterOptions.AdapterOptions() -> void
DataCore.Adapter.AdapterOptions.Description.get -> string?
DataCore.Adapter.AdapterOptions.Description.set -> void
DataCore.Adapter.AdapterOptions.IsEnabled.get -> bool
DataCore.Adapter.AdapterOptions.IsEnabled.set -> void
DataCore.Adapter.AdapterOptions.Name.get -> string?
DataCore.Adapter.AdapterOptions.Name.set -> void
DataCore.Adapter.AdapterOptionsResources
DataCore.Adapter.AdapterRequestExtensions
DataCore.Adapter.AdapterTaskExtensions
DataCore.Adapter.AssetModel.AssetModelManager
DataCore.Adapter.AssetModel.AssetModelManager.AddOrUpdateNodeAsync(DataCore.Adapter.AssetModel.AssetModelNode! node, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
DataCore.Adapter.AssetModel.AssetModelManager.AssetModelManager(DataCore.Adapter.Services.IKeyValueStore? keyValueStore = null, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Func<DataCore.Adapter.Diagnostics.ConfigurationChange!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>? onConfigurationChange = null, System.Collections.Generic.IComparer<string!>? nodeNameComparer = null) -> void
DataCore.Adapter.AssetModel.AssetModelManager.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.AssetModel.AssetModelManager.BrowseAssetModelNodes(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.AssetModel.BrowseAssetModelNodesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.AssetModel.AssetModelNode!>!
DataCore.Adapter.AssetModel.AssetModelManager.CheckFeatureHealthAsync(DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Diagnostics.HealthCheckResult>!
DataCore.Adapter.AssetModel.AssetModelManager.DeleteNodeAsync(string! nodeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
DataCore.Adapter.AssetModel.AssetModelManager.Dispose() -> void
DataCore.Adapter.AssetModel.AssetModelManager.FindAssetModelNodes(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.AssetModel.FindAssetModelNodesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.AssetModel.AssetModelNode!>!
DataCore.Adapter.AssetModel.AssetModelManager.GetAssetModelNodes(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.AssetModel.GetAssetModelNodesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.AssetModel.AssetModelNode!>!
DataCore.Adapter.AssetModel.AssetModelManager.GetNodeAsync(string! nodeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<DataCore.Adapter.AssetModel.AssetModelNode?>
DataCore.Adapter.AssetModel.AssetModelManager.InitAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
DataCore.Adapter.AssetModel.AssetModelManager.MoveNodeAsync(string! nodeId, string? parentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
DataCore.Adapter.AssetModel.AssetModelNodeBuilder
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.AssetModelNodeBuilder() -> void
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.AssetModelNodeBuilder(DataCore.Adapter.AssetModel.AssetModelNode! existing) -> void
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.Build() -> DataCore.Adapter.AssetModel.AssetModelNode!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithChildren(bool hasChildren) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithDataReference(DataCore.Adapter.AssetModel.DataReference! dataReference) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithDataReference(string! adapterId, DataCore.Adapter.Tags.TagSummary! tag, string? name = null) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithDataReference(string! adapterId, string! tag, string? name = null) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithDataReferences(params DataCore.Adapter.AssetModel.DataReference![]! dataReferences) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithDataReferences(System.Collections.Generic.IEnumerable<DataCore.Adapter.AssetModel.DataReference!>! dataReferences) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithDescription(string? description) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithId(string! id) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithName(string! name) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithNodeType(DataCore.Adapter.AssetModel.NodeType type, string? subType = null) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithParent(string? parentId) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithProperties(params DataCore.Adapter.Common.AdapterProperty![]! properties) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithProperties(System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.AdapterProperty!>! properties) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeBuilder.WithProperty(string! name, object! value) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
DataCore.Adapter.AssetModel.AssetModelNodeExtensions
DataCore.Adapter.AutomaticFeatureRegistrationAttribute
DataCore.Adapter.AutomaticFeatureRegistrationAttribute.AutomaticFeatureRegistrationAttribute(bool enabled = true) -> void
DataCore.Adapter.AutomaticFeatureRegistrationAttribute.IsEnabled.get -> bool
DataCore.Adapter.ChannelExtensions
DataCore.Adapter.Common.AdapterPropertyExtensions
DataCore.Adapter.Common.UpdateSubscriptionTopicsRequest
DataCore.Adapter.Common.UpdateSubscriptionTopicsRequest.Action.get -> DataCore.Adapter.Common.SubscriptionUpdateAction
DataCore.Adapter.Common.UpdateSubscriptionTopicsRequest.Action.set -> void
DataCore.Adapter.Common.UpdateSubscriptionTopicsRequest.Topic.get -> string!
DataCore.Adapter.Common.UpdateSubscriptionTopicsRequest.Topic.set -> void
DataCore.Adapter.Common.UpdateSubscriptionTopicsRequest.UpdateSubscriptionTopicsRequest() -> void
DataCore.Adapter.DefaultAdapterCallContext
DataCore.Adapter.DefaultAdapterCallContext.ConnectionId.get -> string!
DataCore.Adapter.DefaultAdapterCallContext.CorrelationId.get -> string!
DataCore.Adapter.DefaultAdapterCallContext.CultureInfo.get -> System.Globalization.CultureInfo!
DataCore.Adapter.DefaultAdapterCallContext.Items.get -> System.Collections.Generic.IDictionary<object!, object?>!
DataCore.Adapter.DefaultAdapterCallContext.User.get -> System.Security.Claims.ClaimsPrincipal?
DataCore.Adapter.DefaultRetryPolicy
DataCore.Adapter.DefaultRetryPolicy.DefaultRetryPolicy() -> void
DataCore.Adapter.DefaultRetryPolicy.DefaultRetryPolicy(params System.TimeSpan[]! retryDelays) -> void
DataCore.Adapter.DefaultRetryPolicy.NextRetryDelay(DataCore.Adapter.RetryContext! retryContext) -> System.TimeSpan?
DataCore.Adapter.Diagnostics.ConfigurationChanges
DataCore.Adapter.Diagnostics.ConfigurationChanges.ConfigurationChanges(DataCore.Adapter.Diagnostics.ConfigurationChangesOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.Diagnostics.ConfigurationChanges.NotifyAsync(DataCore.Adapter.Diagnostics.ConfigurationChange! change, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
DataCore.Adapter.Diagnostics.ConfigurationChanges.Subscribe(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Diagnostics.ConfigurationChangesSubscriptionRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Diagnostics.ConfigurationChange!>!
DataCore.Adapter.Diagnostics.ConfigurationChangesOptions
DataCore.Adapter.Diagnostics.ConfigurationChangesOptions.ConfigurationChangesOptions() -> void
DataCore.Adapter.Diagnostics.ConfigurationChangesSubscription
DataCore.Adapter.Diagnostics.ConfigurationChangesSubscription.ConfigurationChangesSubscription(int id, DataCore.Adapter.IAdapterCallContext! context, IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, int capacity) -> void
DataCore.Adapter.Diagnostics.IFeatureHealthCheck
DataCore.Adapter.Diagnostics.IFeatureHealthCheck.CheckFeatureHealthAsync(DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Diagnostics.HealthCheckResult>!
DataCore.Adapter.Events.EventFeatureExtensions
DataCore.Adapter.Events.EventMessageBuilder
DataCore.Adapter.Events.EventMessageBuilder.Build() -> DataCore.Adapter.Events.EventMessage!
DataCore.Adapter.Events.EventMessageBuilder.Build(string! cursorPosition) -> DataCore.Adapter.Events.EventMessageWithCursorPosition!
DataCore.Adapter.Events.EventMessageBuilder.WithCategory(string? category) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessageBuilder.WithId(string! id) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessageBuilder.WithMessage(string? message) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessageBuilder.WithPriority(DataCore.Adapter.Events.EventPriority priority) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessageBuilder.WithProperties(params DataCore.Adapter.Common.AdapterProperty![]! properties) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessageBuilder.WithProperties(System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.AdapterProperty!>! properties) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessageBuilder.WithProperty(string! name, object! value) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessageBuilder.WithTopic(string? topic) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessageBuilder.WithUtcEventTime(System.DateTime utcEventTime) -> DataCore.Adapter.Events.EventMessageBuilder!
DataCore.Adapter.Events.EventMessagePush
DataCore.Adapter.Events.EventMessagePush.EventMessagePush(DataCore.Adapter.Events.EventMessagePushOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.Events.EventMessagePush.HasActiveSubscriptions.get -> bool
DataCore.Adapter.Events.EventMessagePush.Subscribe(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Events.CreateEventMessageSubscriptionRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.EventMessage!>!
DataCore.Adapter.Events.EventMessagePushOptions
DataCore.Adapter.Events.EventMessagePushOptions.EventMessagePushOptions() -> void
DataCore.Adapter.Events.EventMessagePushWithTopics
DataCore.Adapter.Events.EventMessagePushWithTopics.EventMessagePushWithTopics(DataCore.Adapter.Events.EventMessagePushWithTopicsOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.Events.EventMessagePushWithTopics.GetSubscribedTopics() -> System.Collections.Generic.IEnumerable<string!>!
DataCore.Adapter.Events.EventMessagePushWithTopics.HasActiveSubscriptions.get -> bool
DataCore.Adapter.Events.EventMessagePushWithTopics.Subscribe(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Events.CreateEventMessageTopicSubscriptionRequest! request, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.EventMessageSubscriptionUpdate!>! channel, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.EventMessage!>!
DataCore.Adapter.Events.EventMessagePushWithTopicsExtensions
DataCore.Adapter.Events.EventMessagePushWithTopicsOptions
DataCore.Adapter.Events.EventMessagePushWithTopicsOptions.EventMessagePushWithTopicsOptions() -> void
DataCore.Adapter.Events.EventMessagePushWithTopicsOptions.IsTopicMatch.get -> System.Func<string!, string?, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>?
DataCore.Adapter.Events.EventMessagePushWithTopicsOptions.IsTopicMatch.set -> void
DataCore.Adapter.Events.EventMessagePushWithTopicsOptions.OnTopicSubscriptionsAdded.get -> System.Func<DataCore.Adapter.Events.EventMessagePushWithTopics!, System.Collections.Generic.IEnumerable<string!>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>?
DataCore.Adapter.Events.EventMessagePushWithTopicsOptions.OnTopicSubscriptionsAdded.set -> void
DataCore.Adapter.Events.EventMessagePushWithTopicsOptions.OnTopicSubscriptionsRemoved.get -> System.Func<DataCore.Adapter.Events.EventMessagePushWithTopics!, System.Collections.Generic.IEnumerable<string!>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>?
DataCore.Adapter.Events.EventMessagePushWithTopicsOptions.OnTopicSubscriptionsRemoved.set -> void
DataCore.Adapter.Events.EventSubscriptionChannel
DataCore.Adapter.Events.EventSubscriptionChannel.EventSubscriptionChannel(int id, DataCore.Adapter.IAdapterCallContext! context, IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, DataCore.Adapter.Events.EventMessageSubscriptionType subscriptionType, System.TimeSpan publishInterval, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, int channelCapacity = 0) -> void
DataCore.Adapter.Events.EventSubscriptionChannel.SubscriptionType.get -> DataCore.Adapter.Events.EventMessageSubscriptionType
DataCore.Adapter.Events.InMemoryEventMessageStore
DataCore.Adapter.Events.InMemoryEventMessageStore.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.Events.InMemoryEventMessageStore.Dispose() -> void
DataCore.Adapter.Events.InMemoryEventMessageStore.InMemoryEventMessageStore(DataCore.Adapter.Events.InMemoryEventMessageStoreOptions? options = null, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, Microsoft.Extensions.Logging.ILogger? logger = null) -> void
DataCore.Adapter.Events.InMemoryEventMessageStore.Publish -> System.Action<DataCore.Adapter.Events.EventMessage!>?
DataCore.Adapter.Events.InMemoryEventMessageStore.ReadEventMessagesForTimeRange(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Events.ReadEventMessagesForTimeRangeRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.EventMessage!>!
DataCore.Adapter.Events.InMemoryEventMessageStore.ReadEventMessagesUsingCursor(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Events.ReadEventMessagesUsingCursorRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.EventMessageWithCursorPosition!>!
DataCore.Adapter.Events.InMemoryEventMessageStore.WriteEventMessages(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Events.WriteEventMessagesRequest! request, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.WriteEventMessageItem!>! channel, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.WriteEventMessageResult!>!
DataCore.Adapter.Events.InMemoryEventMessageStore.WriteEventMessages(params DataCore.Adapter.Events.EventMessage![]! messages) -> System.Threading.Tasks.ValueTask
DataCore.Adapter.Events.InMemoryEventMessageStore.WriteEventMessages(System.Collections.Generic.IEnumerable<DataCore.Adapter.Events.EventMessage!>! messages) -> System.Threading.Tasks.ValueTask
DataCore.Adapter.Events.InMemoryEventMessageStoreOptions
DataCore.Adapter.Events.InMemoryEventMessageStoreOptions.Capacity.get -> int
DataCore.Adapter.Events.InMemoryEventMessageStoreOptions.Capacity.set -> void
DataCore.Adapter.Events.InMemoryEventMessageStoreOptions.InMemoryEventMessageStoreOptions() -> void
DataCore.Adapter.Extensions.AdapterExtensionFeature
DataCore.Adapter.Extensions.AdapterExtensionFeature.AdapterExtensionFeature(IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.IObjectEncoder!>! encoders) -> void
DataCore.Adapter.Extensions.AdapterExtensionFeature.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindDuplexStream<TFeature, T1, T2>(System.Func<DataCore.Adapter.IAdapterCallContext!, System.Collections.Generic.IAsyncEnumerable<T1?>!, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<T2?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindDuplexStream<TFeature, T1, T2>(System.Func<System.Collections.Generic.IAsyncEnumerable<T1?>!, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<T2?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindDuplexStream<TFeature>(System.Func<DataCore.Adapter.Extensions.DuplexStreamInvocationRequest!, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationStreamItem!>!, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindDuplexStream<TFeature>(System.Func<DataCore.Adapter.IAdapterCallContext!, DataCore.Adapter.Extensions.DuplexStreamInvocationRequest!, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationStreamItem!>!, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7, T8, T9>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T9?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7, T8, T9>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7, T8, T9>(System.Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T9?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7, T8, T9>(System.Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7, T8>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?, T6?, T7?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T8?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7, T8>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7, T8>(System.Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T8?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7, T8>(System.Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?, T6?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T7?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?, T6?, T7?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7>(System.Func<T1?, T2?, T3?, T4?, T5?, T6?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T7?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6, T7>(System.Func<T1?, T2?, T3?, T4?, T5?, T6?, T7?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T6?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?, T6?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6>(System.Func<T1?, T2?, T3?, T4?, T5?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T6?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5, T6>(System.Func<T1?, T2?, T3?, T4?, T5?, T6?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T5?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?, T5?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5>(System.Func<T1?, T2?, T3?, T4?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T5?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4, T5>(System.Func<T1?, T2?, T3?, T4?, T5?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T4?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?, T4?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4>(System.Func<T1?, T2?, T3?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T4?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3, T4>(System.Func<T1?, T2?, T3?, T4?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T3?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?, T3?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3>(System.Func<T1?, T2?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T3?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2, T3>(System.Func<T1?, T2?, T3?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T2?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, T2?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2>(System.Func<T1?, System.Threading.CancellationToken, System.Threading.Tasks.Task<T2?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T1, T2>(System.Func<T1?, T2?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T>(System.Func<DataCore.Adapter.IAdapterCallContext!, System.Threading.CancellationToken, System.Threading.Tasks.Task<T?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T>(System.Func<DataCore.Adapter.IAdapterCallContext!, T?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<T?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature, T>(System.Func<T?>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature>(System.Func<DataCore.Adapter.Extensions.InvocationRequest!, DataCore.Adapter.Extensions.InvocationResponse!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature>(System.Func<DataCore.Adapter.Extensions.InvocationRequest!, System.Threading.CancellationToken, System.Threading.Tasks.Task<DataCore.Adapter.Extensions.InvocationResponse!>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature>(System.Func<DataCore.Adapter.IAdapterCallContext!, DataCore.Adapter.Extensions.InvocationRequest!, DataCore.Adapter.Extensions.InvocationResponse!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindInvoke<TFeature>(System.Func<DataCore.Adapter.IAdapterCallContext!, DataCore.Adapter.Extensions.InvocationRequest!, System.Threading.CancellationToken, System.Threading.Tasks.Task<DataCore.Adapter.Extensions.InvocationResponse!>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindStream<TFeature, T1, T2>(System.Func<DataCore.Adapter.IAdapterCallContext!, T1?, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<T2?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindStream<TFeature, T1, T2>(System.Func<T1?, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<T2?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindStream<TFeature, T>(System.Func<DataCore.Adapter.IAdapterCallContext!, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<T?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindStream<TFeature, T>(System.Func<System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<T?>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindStream<TFeature>(System.Func<DataCore.Adapter.Extensions.InvocationRequest!, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.BindStream<TFeature>(System.Func<DataCore.Adapter.IAdapterCallContext!, DataCore.Adapter.Extensions.InvocationRequest!, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!>! handler, string? name = null, string? description = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters = null, System.Reflection.MethodInfo? descriptorProvider = null) -> bool
DataCore.Adapter.Extensions.AdapterExtensionFeature.DuplexStream(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.DuplexStreamInvocationRequest! request, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationStreamItem!>! channel, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!
DataCore.Adapter.Extensions.AdapterExtensionFeature.Encoders.get -> System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.IObjectEncoder!>!
DataCore.Adapter.Extensions.AdapterExtensionFeature.GetDescriptor(DataCore.Adapter.IAdapterCallContext! context, System.Uri? featureUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Common.FeatureDescriptor?>!
DataCore.Adapter.Extensions.AdapterExtensionFeature.GetOperations(DataCore.Adapter.IAdapterCallContext! context, System.Uri? featureUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationDescriptor!>!>!
DataCore.Adapter.Extensions.AdapterExtensionFeature.Invoke(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.InvocationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Extensions.InvocationResponse!>!
DataCore.Adapter.Extensions.AdapterExtensionFeature.Stream(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.InvocationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!
DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions
DataCore.Adapter.Extensions.CustomFunctionAuthorizeHandler
DataCore.Adapter.Extensions.CustomFunctionHandler
DataCore.Adapter.Extensions.CustomFunctionHandler<TRequest, TResponse>
DataCore.Adapter.Extensions.CustomFunctionHandler<TResponse>
DataCore.Adapter.Extensions.CustomFunctions
DataCore.Adapter.Extensions.CustomFunctions.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.Extensions.CustomFunctions.BaseUri.get -> System.Uri!
DataCore.Adapter.Extensions.CustomFunctions.CreateJsonSchema<T>() -> System.Text.Json.JsonElement
DataCore.Adapter.Extensions.CustomFunctions.CustomFunctions(System.Uri! baseUri, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Text.Json.JsonSerializerOptions? jsonOptions = null, Microsoft.Extensions.Logging.ILogger? logger = null) -> void
DataCore.Adapter.Extensions.CustomFunctions.RegisterFunctionAsync(DataCore.Adapter.Extensions.CustomFunctionDescriptorExtended! descriptor, DataCore.Adapter.Extensions.CustomFunctionHandler! handler, DataCore.Adapter.Extensions.CustomFunctionAuthorizeHandler? authorizeHandler = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
DataCore.Adapter.Extensions.CustomFunctions.RegisterFunctionAsync<TRequest, TResponse>(string! name, string? description, DataCore.Adapter.Extensions.CustomFunctionHandler<TRequest, TResponse>! handler, DataCore.Adapter.Extensions.CustomFunctionAuthorizeHandler? authorizeHandler = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
DataCore.Adapter.Extensions.CustomFunctions.RegisterFunctionAsync<TRequest, TResponse>(System.Uri! id, string! name, string? description, DataCore.Adapter.Extensions.CustomFunctionHandler<TRequest, TResponse>! handler, DataCore.Adapter.Extensions.CustomFunctionAuthorizeHandler? authorizeHandler = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
DataCore.Adapter.Extensions.CustomFunctions.UnregisterFunctionAsync(System.Uri! id, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
DataCore.Adapter.Extensions.CustomFunctionValidationExtensions
DataCore.Adapter.IRetryPolicy
DataCore.Adapter.IRetryPolicy.NextRetryDelay(DataCore.Adapter.RetryContext! retryContext) -> System.TimeSpan?
DataCore.Adapter.Json.Schema.DataTypeFormatIntent
DataCore.Adapter.Json.Schema.DataTypeFormatIntent.Apply(Json.Schema.JsonSchemaBuilder! builder) -> void
DataCore.Adapter.Json.Schema.DataTypeFormatIntent.DataTypeFormatIntent(System.ComponentModel.DataAnnotations.DataType dataType) -> void
DataCore.Adapter.Json.Schema.DisplayIntent
DataCore.Adapter.Json.Schema.DisplayIntent.Apply(Json.Schema.JsonSchemaBuilder! builder) -> void
DataCore.Adapter.Json.Schema.DisplayIntent.DisplayIntent(string? name, string? description) -> void
DataCore.Adapter.Json.Schema.JsonSchemaUtility
DataCore.Adapter.Json.Schema.MaxLengthIntent
DataCore.Adapter.Json.Schema.MaxLengthIntent.Apply(Json.Schema.JsonSchemaBuilder! builder) -> void
DataCore.Adapter.Json.Schema.MaxLengthIntent.MaxLengthIntent(int limit) -> void
DataCore.Adapter.Json.Schema.MinLengthIntent
DataCore.Adapter.Json.Schema.MinLengthIntent.Apply(Json.Schema.JsonSchemaBuilder! builder) -> void
DataCore.Adapter.Json.Schema.MinLengthIntent.MinLengthIntent(int limit) -> void
DataCore.Adapter.Json.Schema.RangeIntent
DataCore.Adapter.Json.Schema.RangeIntent.Apply(Json.Schema.JsonSchemaBuilder! builder) -> void
DataCore.Adapter.Json.Schema.RangeIntent.RangeIntent(decimal? lower, decimal? upper) -> void
DataCore.Adapter.Json.Schema.TimeSpanFormatIntent
DataCore.Adapter.Json.Schema.TimeSpanFormatIntent.Apply(Json.Schema.JsonSchemaBuilder! builder) -> void
DataCore.Adapter.Json.Schema.TimeSpanFormatIntent.TimeSpanFormatIntent() -> void
DataCore.Adapter.PatternMatchingExtensions
DataCore.Adapter.RealTimeData.InMemoryTagValueAnnotationManager
DataCore.Adapter.RealTimeData.InMemoryTagValueAnnotationManager.CreateOrUpdateAnnotationAsync(string! tagId, DataCore.Adapter.RealTimeData.TagValueAnnotationExtended! annotation, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
DataCore.Adapter.RealTimeData.InMemoryTagValueAnnotationManager.DeleteAnnotationAsync(string! tagId, string! annotationId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
DataCore.Adapter.RealTimeData.InMemoryTagValueAnnotationManager.InMemoryTagValueAnnotationManager(DataCore.Adapter.RealTimeData.TagValueAnnotationManagerOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService) -> void
DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePush
DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePush.PollingSnapshotTagValuePush(DataCore.Adapter.RealTimeData.IReadSnapshotTagValues! readSnapshotFeature, DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePushOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePushOptions
DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePushOptions.PollingInterval.get -> System.TimeSpan
DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePushOptions.PollingInterval.set -> void
DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePushOptions.PollingSnapshotTagValuePushOptions() -> void
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.GetSupportedDataFunctions(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.GetSupportedDataFunctionsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.DataFunctionDescriptor!>!
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.ReadHistoricalTagValues(string? adapterId, DataCore.Adapter.Tags.ITagInfo! tagInfoProvider, DataCore.Adapter.RealTimeData.IReadRawTagValues! rawValuesProvider, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService) -> void
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.ReadPlotTagValues(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.ReadPlotTagValuesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.ReadProcessedTagValues(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.ReadProcessedTagValuesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.ProcessedTagValueQueryResult!>!
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.ReadTagValuesAtTimes(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.ReadTagValuesAtTimesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.RegisterDataFunction(DataCore.Adapter.RealTimeData.DataFunctionDescriptor! descriptor, DataCore.Adapter.RealTimeData.Utilities.AggregateCalculator! calculator) -> bool
DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.UnregisterDataFunction(string! functionId) -> bool
DataCore.Adapter.RealTimeData.RealTimeDataFeatureExtensions
DataCore.Adapter.RealTimeData.SnapshotTagValueManager
DataCore.Adapter.RealTimeData.SnapshotTagValueManager.DeleteSnapshotTagValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
DataCore.Adapter.RealTimeData.SnapshotTagValueManager.ReadSnapshotTagValues(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.ReadSnapshotTagValuesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
DataCore.Adapter.RealTimeData.SnapshotTagValueManager.SnapshotTagValueManager(DataCore.Adapter.RealTimeData.SnapshotTagValueManagerOptions? options = null, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, DataCore.Adapter.Services.IKeyValueStore? keyValueStore = null, Microsoft.Extensions.Logging.ILogger? logger = null) -> void
DataCore.Adapter.RealTimeData.SnapshotTagValueManagerOptions
DataCore.Adapter.RealTimeData.SnapshotTagValueManagerOptions.SnapshotTagValueManagerOptions() -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePush
DataCore.Adapter.RealTimeData.SnapshotTagValuePush.SnapshotTagValuePush(DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase
DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.GetSubscribedTags() -> System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>!
DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.HasSubscribersAsync(DataCore.Adapter.Tags.TagIdentifier! tag) -> System.Threading.Tasks.ValueTask<bool>
DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.PublishValueToSubscribersAsync(DataCore.Adapter.RealTimeData.TagValueQueryResult! value, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.RemoveCachedValuesIfNoSubscribersAsync(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>! tags, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.SnapshotTagValuePushBase(DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.Subscribe(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.CreateSnapshotTagValueSubscriptionRequest! request, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueSubscriptionUpdate!>! channel, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
DataCore.Adapter.RealTimeData.SnapshotTagValuePushExtensions
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.HasSubscribers.get -> System.Func<DataCore.Adapter.Tags.TagIdentifier!, bool>?
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.HasSubscribers.set -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.IsTopicMatch.get -> System.Func<DataCore.Adapter.Tags.TagIdentifier!, DataCore.Adapter.Tags.TagIdentifier!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>?
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.IsTopicMatch.set -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.OnTagSubscriptionsAdded.get -> System.Func<DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase!, System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>?
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.OnTagSubscriptionsAdded.set -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.OnTagSubscriptionsRemoved.get -> System.Func<DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase!, System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>?
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.OnTagSubscriptionsRemoved.set -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.SnapshotTagValuePushOptions() -> void
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.TagResolver.get -> DataCore.Adapter.Tags.TagResolver?
DataCore.Adapter.RealTimeData.SnapshotTagValuePushOptions.TagResolver.set -> void
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.Build() -> DataCore.Adapter.RealTimeData.TagValueAnnotationExtended!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.TagValueAnnotationBuilder() -> void
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.TagValueAnnotationBuilder(DataCore.Adapter.RealTimeData.TagValueAnnotation! existing) -> void
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.TagValueAnnotationBuilder(DataCore.Adapter.RealTimeData.TagValueAnnotationExtended! existing) -> void
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithDescription(string? description) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithId(string! id) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithProperties(params DataCore.Adapter.Common.AdapterProperty![]! properties) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithProperties(System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.AdapterProperty!>! properties) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithProperty(string! name, object! value) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithType(DataCore.Adapter.RealTimeData.AnnotationType type) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithUtcEndTime(System.DateTime? utcTime) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithUtcStartTime(System.DateTime utcTime) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.WithValue(string? value) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase
DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.TagValueAnnotationManagerBase(DataCore.Adapter.RealTimeData.TagValueAnnotationManagerOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService) -> void
DataCore.Adapter.RealTimeData.TagValueAnnotationManagerOptions
DataCore.Adapter.RealTimeData.TagValueAnnotationManagerOptions.TagResolver.get -> DataCore.Adapter.Tags.TagResolver?
DataCore.Adapter.RealTimeData.TagValueAnnotationManagerOptions.TagResolver.set -> void
DataCore.Adapter.RealTimeData.TagValueAnnotationManagerOptions.TagValueAnnotationManagerOptions() -> void
DataCore.Adapter.RealTimeData.TagValueBuilder
DataCore.Adapter.RealTimeData.TagValueBuilder.Build() -> DataCore.Adapter.RealTimeData.TagValueExtended!
DataCore.Adapter.RealTimeData.TagValueBuilder.TagValueBuilder() -> void
DataCore.Adapter.RealTimeData.TagValueBuilder.TagValueBuilder(DataCore.Adapter.RealTimeData.TagValue! existing) -> void
DataCore.Adapter.RealTimeData.TagValueBuilder.TagValueBuilder(DataCore.Adapter.RealTimeData.TagValueExtended! existing) -> void
DataCore.Adapter.RealTimeData.TagValueBuilder.WithError(string? error) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithNotes(string? notes) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithProperties(params DataCore.Adapter.Common.AdapterProperty![]! properties) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithProperties(System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.AdapterProperty!>! properties) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithProperty(string! name, object! value) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithStatus(DataCore.Adapter.RealTimeData.TagValueStatus status) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithUnits(string? units) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithUtcSampleTime(System.DateTime utcSampleTime) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithValue(DataCore.Adapter.Common.Variant value, string? displayValue = null) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueBuilder.WithValue<T>(T value, string? displayValue = null) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
DataCore.Adapter.RealTimeData.TagValueSubscriptionChannel
DataCore.Adapter.RealTimeData.TagValueSubscriptionChannel.TagValueSubscriptionChannel(int id, DataCore.Adapter.IAdapterCallContext! context, IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.TimeSpan publishInterval, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, int channelCapacity = 0) -> void
DataCore.Adapter.RealTimeData.Utilities.AggregateCalculator
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.AggregationHelper() -> void
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.GetAggregatedValues(DataCore.Adapter.Tags.TagSummary! tag, System.Collections.Generic.IEnumerable<string!>! dataFunctions, System.DateTime utcStartTime, System.DateTime utcEndTime, System.TimeSpan sampleInterval, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>! rawData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.ProcessedTagValueQueryResult!>!
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.GetAggregatedValues(DataCore.Adapter.Tags.TagSummary! tag, System.Collections.Generic.IEnumerable<string!>! dataFunctions, System.DateTime utcStartTime, System.DateTime utcEndTime, System.TimeSpan sampleInterval, System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>! rawData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.ProcessedTagValueQueryResult!>!
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.GetAggregatedValues(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagSummary!>! tags, System.Collections.Generic.IEnumerable<string!>! dataFunctions, System.DateTime utcStartTime, System.DateTime utcEndTime, System.TimeSpan sampleInterval, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>! rawData, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.ProcessedTagValueQueryResult!>!
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.GetAggregatedValues(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagSummary!>! tags, System.Collections.Generic.IEnumerable<string!>! dataFunctions, System.DateTime utcStartTime, System.DateTime utcEndTime, System.TimeSpan sampleInterval, System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>! rawData, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.ProcessedTagValueQueryResult!>!
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.GetSupportedDataFunctions() -> System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.DataFunctionDescriptor!>!
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.RegisterDataFunction(DataCore.Adapter.RealTimeData.DataFunctionDescriptor! descriptor, DataCore.Adapter.RealTimeData.Utilities.AggregateCalculator! calculator) -> bool
DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.UnregisterDataFunction(string! functionId) -> bool
DataCore.Adapter.RealTimeData.Utilities.CommonTagValuePropertyNames
DataCore.Adapter.RealTimeData.Utilities.InterpolationCalculationType
DataCore.Adapter.RealTimeData.Utilities.InterpolationCalculationType.Interpolate = 0 -> DataCore.Adapter.RealTimeData.Utilities.InterpolationCalculationType
DataCore.Adapter.RealTimeData.Utilities.InterpolationCalculationType.UsePreviousValue = 1 -> DataCore.Adapter.RealTimeData.Utilities.InterpolationCalculationType
DataCore.Adapter.RealTimeData.Utilities.InterpolationHelper
DataCore.Adapter.RealTimeData.Utilities.PlotHelper
DataCore.Adapter.RealTimeData.Utilities.PlotValue
DataCore.Adapter.RealTimeData.Utilities.PlotValue.Criteria.get -> string![]?
DataCore.Adapter.RealTimeData.Utilities.PlotValue.PlotValue() -> void
DataCore.Adapter.RealTimeData.Utilities.PlotValue.PlotValue(DataCore.Adapter.RealTimeData.TagValueExtended! sample, params string![]! criteria) -> void
DataCore.Adapter.RealTimeData.Utilities.PlotValue.PlotValue(DataCore.Adapter.RealTimeData.TagValueExtended! sample, System.Collections.Generic.IEnumerable<string!>? criteria) -> void
DataCore.Adapter.RealTimeData.Utilities.PlotValue.Sample.get -> DataCore.Adapter.RealTimeData.TagValueExtended!
DataCore.Adapter.RealTimeData.Utilities.PlotValueSelector
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.RawSampleCount.get -> int
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.RawSamples.get -> System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.TagValueExtended!>!
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.TagValueBucket(System.DateTime utcBucketStart, System.DateTime utcBucketEnd, System.DateTime utcQueryStart, System.DateTime utcQueryEnd) -> void
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.UtcBucketEnd.get -> System.DateTime
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.UtcBucketStart.get -> System.DateTime
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.UtcQueryEnd.get -> System.DateTime
DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.UtcQueryStart.get -> System.DateTime
DataCore.Adapter.RepeatingRetryPolicy
DataCore.Adapter.RepeatingRetryPolicy.NextRetryDelay(DataCore.Adapter.RetryContext! retryContext) -> System.TimeSpan?
DataCore.Adapter.RepeatingRetryPolicy.RepeatingRetryPolicy() -> void
DataCore.Adapter.RepeatingRetryPolicy.RepeatingRetryPolicy(params System.TimeSpan[]! retryDelays) -> void
DataCore.Adapter.ResolvedAdapterFeature<TFeature>
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.Adapter.get -> DataCore.Adapter.IAdapter!
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.Equals(DataCore.Adapter.ResolvedAdapterFeature<TFeature> other) -> bool
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.Feature.get -> TFeature
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.IsAdapterResolved.get -> bool
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.IsExtensionFeature.get -> bool
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.IsFeatureAuthorized.get -> bool
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.IsFeatureResolved.get -> bool
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.ResolvedAdapterFeature() -> void
DataCore.Adapter.ResolvedAdapterFeature<TFeature>.ResolvedAdapterFeature(DataCore.Adapter.IAdapter! adapter, TFeature feature, bool isFeatureAuthorized) -> void
DataCore.Adapter.RetryContext
DataCore.Adapter.RetryContext.ElapsedTime.get -> System.TimeSpan
DataCore.Adapter.RetryContext.ElapsedTime.set -> void
DataCore.Adapter.RetryContext.PreviousRetryCount.get -> long
DataCore.Adapter.RetryContext.PreviousRetryCount.set -> void
DataCore.Adapter.RetryContext.RetryContext() -> void
DataCore.Adapter.RetryContext.RetryReason.get -> System.Exception?
DataCore.Adapter.RetryContext.RetryReason.set -> void
DataCore.Adapter.Security.CertificateUtilities
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.CancellationToken.get -> System.Threading.CancellationToken
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.Context.get -> DataCore.Adapter.IAdapterCallContext!
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.Dispose() -> void
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.Id.get -> int
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.Publish(TValue value, bool immediate = false) -> bool
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.PublishInterval.get -> System.TimeSpan
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.ReadAllAsync(System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<TValue>!
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.SubscriptionChannel(int id, DataCore.Adapter.IAdapterCallContext! context, IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.TimeSpan publishInterval, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, int channelCapacity = 0) -> void
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.Topics.get -> System.Collections.Generic.IEnumerable<TTopic>!
DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.~SubscriptionChannel() -> void
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.CheckFeatureHealthAsync(DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Diagnostics.HealthCheckResult>!
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.CreateSubscriptionAsync(DataCore.Adapter.IAdapterCallContext! context, string? name, object? state, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TSubscription!>
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.CreateSubscriptionAsync<TFeature>(DataCore.Adapter.IAdapterCallContext! context, string! name, object? state, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TSubscription!>
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.Dispose() -> void
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.DisposedToken.get -> System.Threading.CancellationToken
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.GetSubscriptions() -> System.Collections.Generic.IEnumerable<TSubscription!>!
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.HasSubscriptions.get -> bool
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.Id.get -> string!
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.Options.get -> TOptions!
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.Publish -> System.Action<TValue>?
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.SubscriptionAdded -> System.Action<TSubscription!>?
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.SubscriptionCancelled -> System.Action<TSubscription!>?
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.SubscriptionManager(TOptions? options, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService, Microsoft.Extensions.Logging.ILogger? logger) -> void
DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.~SubscriptionManager() -> void
DataCore.Adapter.SubscriptionManagerOptions
DataCore.Adapter.SubscriptionManagerOptions.AdapterId.get -> string?
DataCore.Adapter.SubscriptionManagerOptions.AdapterId.set -> void
DataCore.Adapter.SubscriptionManagerOptions.ChannelCapacity.get -> int
DataCore.Adapter.SubscriptionManagerOptions.ChannelCapacity.set -> void
DataCore.Adapter.SubscriptionManagerOptions.Id.get -> string?
DataCore.Adapter.SubscriptionManagerOptions.Id.set -> void
DataCore.Adapter.SubscriptionManagerOptions.MaxSubscriptionCount.get -> int
DataCore.Adapter.SubscriptionManagerOptions.MaxSubscriptionCount.set -> void
DataCore.Adapter.SubscriptionManagerOptions.SubscriptionManagerOptions() -> void
DataCore.Adapter.Tags.TagConfigurationBase<T>
DataCore.Adapter.Tags.TagConfigurationBase<T>.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.Tags.TagConfigurationBase<T>.CreateTagAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Tags.CreateTagRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Tags.TagDefinition!>!
DataCore.Adapter.Tags.TagConfigurationBase<T>.DeleteTagAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Tags.DeleteTagRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
DataCore.Adapter.Tags.TagConfigurationBase<T>.GetTagSchemaAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Tags.GetTagSchemaRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Text.Json.JsonElement>!
DataCore.Adapter.Tags.TagConfigurationBase<T>.TagConfigurationBase(IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Text.Json.JsonSerializerOptions? jsonSerializerOptions = null) -> void
DataCore.Adapter.Tags.TagConfigurationBase<T>.TagConfigurationBase(System.Text.Json.JsonElement schema, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Text.Json.JsonSerializerOptions? jsonSerializerOptions = null) -> void
DataCore.Adapter.Tags.TagConfigurationBase<T>.UpdateTagAsync(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Tags.UpdateTagRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Tags.TagDefinition!>!
DataCore.Adapter.Tags.TagDefinitionBuilder
DataCore.Adapter.Tags.TagDefinitionBuilder.Build() -> DataCore.Adapter.Tags.TagDefinition!
DataCore.Adapter.Tags.TagDefinitionBuilder.ClearDigitalStates() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.ClearLabels() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.ClearProperties() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.ClearSupportedFeatures() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.TagDefinitionBuilder() -> void
DataCore.Adapter.Tags.TagDefinitionBuilder.TagDefinitionBuilder(DataCore.Adapter.Tags.TagDefinition! existing) -> void
DataCore.Adapter.Tags.TagDefinitionBuilder.TagDefinitionBuilder(string! id, string! name) -> void
DataCore.Adapter.Tags.TagDefinitionBuilder.TagDefinitionBuilder(string! identifier) -> void
DataCore.Adapter.Tags.TagDefinitionBuilder.WithDataType(DataCore.Adapter.Common.VariantType dataType) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithDescription(string? description) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithDigitalStates(DataCore.Adapter.Tags.DigitalStateSet? stateSet) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithDigitalStates(params DataCore.Adapter.Tags.DigitalState![]! states) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithDigitalStates(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.DigitalState!>? states) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithId(string! id) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithLabels(params string![]! labels) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithLabels(System.Collections.Generic.IEnumerable<string!>? labels) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithName(string! name) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithProperties(params DataCore.Adapter.Common.AdapterProperty![]! properties) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithProperties(System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.AdapterProperty!>? properties) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithProperty(string! name, object? value, string? description = null) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportedFeature<TFeature>(string? hashFragment = null) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportedFeatures(DataCore.Adapter.IAdapter! adapter, params DataCore.Adapter.RealTimeData.DataFunctionDescriptor![]! dataFunctions) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportedFeatures(DataCore.Adapter.IAdapter! adapter, System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.DataFunctionDescriptor!>? dataFunctions) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportedFeatures(params string![]! uriStrings) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportedFeatures(params System.Uri![]! uris) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportedFeatures(System.Collections.Generic.IEnumerable<string!>? uriStrings) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportedFeatures(System.Collections.Generic.IEnumerable<System.Uri!>? uris) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsReadAnnotations() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsReadPlotValues() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsReadProcessedValues(params DataCore.Adapter.RealTimeData.DataFunctionDescriptor![]! dataFunctions) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsReadProcessedValues(System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.DataFunctionDescriptor!>? dataFunctions) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsReadRawValues() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsReadSnapshotValues() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsReadValuesAtTimes() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsSnapshotValuePush() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsWriteAnnotations() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsWriteHistoricalValues() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithSupportsWriteSnapshotValues() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionBuilder.WithUnits(string? units) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
DataCore.Adapter.Tags.TagDefinitionExtensions
DataCore.Adapter.Tags.TagManager
DataCore.Adapter.Tags.TagManager.AddOrUpdateTagAsync(DataCore.Adapter.Tags.TagDefinition! tag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
DataCore.Adapter.Tags.TagManager.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.Tags.TagManager.CheckFeatureHealthAsync(DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Diagnostics.HealthCheckResult>!
DataCore.Adapter.Tags.TagManager.Count.get -> int
DataCore.Adapter.Tags.TagManager.DeleteTagAsync(string! tagNameOrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
DataCore.Adapter.Tags.TagManager.Dispose() -> void
DataCore.Adapter.Tags.TagManager.FindTags(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Tags.FindTagsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Tags.TagDefinition!>!
DataCore.Adapter.Tags.TagManager.GetTagAsync(string! tagNameOrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<DataCore.Adapter.Tags.TagDefinition?>
DataCore.Adapter.Tags.TagManager.GetTagProperties(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Tags.GetTagPropertiesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Common.AdapterProperty!>!
DataCore.Adapter.Tags.TagManager.GetTags(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Tags.GetTagsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Tags.TagDefinition!>!
DataCore.Adapter.Tags.TagManager.InitAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
DataCore.Adapter.Tags.TagManager.TagManager(DataCore.Adapter.Services.IKeyValueStore? keyValueStore = null, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.AdapterProperty!>? tagPropertyDefinitions = null, System.Func<DataCore.Adapter.Diagnostics.ConfigurationChange!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>? onConfigurationChange = null) -> void
DataCore.Adapter.Tags.TagResolver
DataCore.Adapter.ValidationExtensions
override DataCore.Adapter.AdapterBase<TAdapterOptions>.Dispose(bool disposing) -> void
override DataCore.Adapter.AdapterBase<TAdapterOptions>.DisposeAsyncCore() -> System.Threading.Tasks.ValueTask
override DataCore.Adapter.Diagnostics.ConfigurationChanges.CreateSubscriptionChannel(DataCore.Adapter.IAdapterCallContext! context, int id, int channelCapacity, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, object? state) -> DataCore.Adapter.Diagnostics.ConfigurationChangesSubscription!
override DataCore.Adapter.Diagnostics.ConfigurationChanges.Dispose(bool disposing) -> void
override DataCore.Adapter.Diagnostics.ConfigurationChanges.IsTopicMatch(DataCore.Adapter.Diagnostics.ConfigurationChange! value, System.Collections.Generic.IEnumerable<string!>! topics, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
override DataCore.Adapter.Events.EventMessagePush.CreateSubscriptionChannel(DataCore.Adapter.IAdapterCallContext! context, int id, int channelCapacity, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, object? state) -> DataCore.Adapter.Events.EventSubscriptionChannel!
override DataCore.Adapter.Events.EventMessagePush.Dispose(bool disposing) -> void
override DataCore.Adapter.Events.EventMessagePush.GetHealthCheckProperties(DataCore.Adapter.IAdapterCallContext! context) -> System.Collections.Generic.IDictionary<string!, string!>!
override DataCore.Adapter.Events.EventMessagePush.OnSubscriptionAddedAsync(DataCore.Adapter.Events.EventSubscriptionChannel! subscription, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
override DataCore.Adapter.Events.EventMessagePush.OnSubscriptionCancelledAsync(DataCore.Adapter.Events.EventSubscriptionChannel! subscription, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
override DataCore.Adapter.Events.EventMessagePushWithTopics.CreateSubscriptionChannel(DataCore.Adapter.IAdapterCallContext! context, int id, int channelCapacity, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, object? state) -> DataCore.Adapter.Events.EventSubscriptionChannel!
override DataCore.Adapter.Events.EventMessagePushWithTopics.Dispose(bool disposing) -> void
override DataCore.Adapter.Events.EventMessagePushWithTopics.GetHealthCheckProperties(DataCore.Adapter.IAdapterCallContext! context) -> System.Collections.Generic.IDictionary<string!, string!>!
override DataCore.Adapter.Events.EventMessagePushWithTopics.IsTopicMatch(DataCore.Adapter.Events.EventMessage! value, System.Collections.Generic.IEnumerable<string!>! topics, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
override DataCore.Adapter.Events.EventMessagePushWithTopics.OnSubscriptionAddedAsync(DataCore.Adapter.Events.EventSubscriptionChannel! subscription, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
override DataCore.Adapter.Events.EventMessagePushWithTopics.OnSubscriptionCancelledAsync(DataCore.Adapter.Events.EventSubscriptionChannel! subscription, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
override DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePush.Dispose(bool disposing) -> void
override DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePush.OnTagsAdded(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePush.OnTagsRemoved(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override DataCore.Adapter.RealTimeData.SnapshotTagValueManager.AddOrUpdateCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, DataCore.Adapter.RealTimeData.TagValueQueryResult! value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
override DataCore.Adapter.RealTimeData.SnapshotTagValueManager.Dispose(bool disposing) -> void
override DataCore.Adapter.RealTimeData.SnapshotTagValueManager.GetCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<DataCore.Adapter.RealTimeData.TagValueQueryResult?>
override DataCore.Adapter.RealTimeData.SnapshotTagValueManager.OnTagsAdded(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override DataCore.Adapter.RealTimeData.SnapshotTagValueManager.RemoveCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
override DataCore.Adapter.RealTimeData.SnapshotTagValueManager.ResolveTags(DataCore.Adapter.IAdapterCallContext! context, System.Collections.Generic.IEnumerable<string!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Tags.TagIdentifier!>!
override DataCore.Adapter.RealTimeData.SnapshotTagValuePush.AddOrUpdateCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, DataCore.Adapter.RealTimeData.TagValueQueryResult! value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
override DataCore.Adapter.RealTimeData.SnapshotTagValuePush.GetCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<DataCore.Adapter.RealTimeData.TagValueQueryResult?>
override DataCore.Adapter.RealTimeData.SnapshotTagValuePush.OnTagsRemoved(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override DataCore.Adapter.RealTimeData.SnapshotTagValuePush.RemoveCachedValueAsync(DataCore.Adapter.Tags.TagIdentifier! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
override DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.CreateSubscriptionChannel(DataCore.Adapter.IAdapterCallContext! context, int id, int channelCapacity, System.Threading.CancellationToken[]! cancellationTokens, System.Func<System.Threading.Tasks.ValueTask>! cleanup, object? state) -> DataCore.Adapter.RealTimeData.TagValueSubscriptionChannel!
override DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.Dispose(bool disposing) -> void
override DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.GetHealthCheckProperties(DataCore.Adapter.IAdapterCallContext! context) -> System.Collections.Generic.IDictionary<string!, string!>!
override DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.IsTopicMatch(DataCore.Adapter.RealTimeData.TagValueQueryResult! value, System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>! topics, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
override DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.OnSubscriptionCancelledAsync(DataCore.Adapter.RealTimeData.TagValueSubscriptionChannel! subscription, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
override DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.ValueReceived(DataCore.Adapter.RealTimeData.TagValueQueryResult! message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
override DataCore.Adapter.RealTimeData.Utilities.TagValueBucket.ToString() -> string!
override DataCore.Adapter.ResolvedAdapterFeature<TFeature>.Equals(object? obj) -> bool
override DataCore.Adapter.ResolvedAdapterFeature<TFeature>.GetHashCode() -> int
override sealed DataCore.Adapter.AdapterBase<TAdapterOptions>.StartAsyncCore(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override sealed DataCore.Adapter.AdapterBase<TAdapterOptions>.StopAsyncCore(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
static DataCore.Adapter.AdapterAccessorExtensions.GetAdapterAndFeature(this DataCore.Adapter.IAdapterAccessor! adapterAccessor, DataCore.Adapter.IAdapterCallContext! context, string! adapterId, string! featureUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<DataCore.Adapter.ResolvedAdapterFeature<DataCore.Adapter.IAdapterFeature!>>!
static DataCore.Adapter.AdapterAccessorExtensions.GetAdapterAndFeature(this DataCore.Adapter.IAdapterAccessor! adapterAccessor, DataCore.Adapter.IAdapterCallContext! context, string! adapterId, System.Uri! featureUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<DataCore.Adapter.ResolvedAdapterFeature<DataCore.Adapter.IAdapterFeature!>>!
static DataCore.Adapter.AdapterAccessorExtensions.GetAdapterAndFeature<TFeature>(this DataCore.Adapter.IAdapterAccessor! adapterAccessor, DataCore.Adapter.IAdapterCallContext! context, string! adapterId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<DataCore.Adapter.ResolvedAdapterFeature<TFeature>>!
static DataCore.Adapter.AdapterAccessorExtensions.GetAdapterAndFeature<TFeature>(this DataCore.Adapter.IAdapterAccessor! adapterAccessor, DataCore.Adapter.IAdapterCallContext! context, string! adapterId, System.Uri! featureUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<DataCore.Adapter.ResolvedAdapterFeature<TFeature>>!
static DataCore.Adapter.AdapterAccessorExtensions.GetAllAdapters(this DataCore.Adapter.IAdapterAccessor! adapterAccessor, DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.IAdapter!>!
static DataCore.Adapter.AdapterRequestExtensions.SelectPage<T>(this System.Linq.IOrderedEnumerable<T>! items, DataCore.Adapter.Common.IPageableAdapterRequest! request) -> System.Collections.Generic.IEnumerable<T>!
static DataCore.Adapter.AdapterRequestExtensions.SelectPage<T>(this System.Linq.IOrderedEnumerable<T>! items, int pageSize, int page) -> System.Collections.Generic.IEnumerable<T>!
static DataCore.Adapter.AdapterTaskExtensions.TimeoutAfter(this System.Threading.Tasks.Task! task, System.TimeSpan delay) -> System.Threading.Tasks.Task!
static DataCore.Adapter.AdapterTaskExtensions.TimeoutAfter<T>(this System.Threading.Tasks.Task<T>! task, System.TimeSpan delay) -> System.Threading.Tasks.Task<T>!
static DataCore.Adapter.AdapterTaskExtensions.WithCancellation(this System.Threading.Tasks.Task! task, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
static DataCore.Adapter.AdapterTaskExtensions.WithCancellation<T>(this System.Threading.Tasks.Task<T>! task, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T>!
static DataCore.Adapter.AssetModel.AssetModelManager.CreateConfigurationChangeDelegate(DataCore.Adapter.Diagnostics.ConfigurationChanges! configurationChanges) -> System.Func<DataCore.Adapter.Diagnostics.ConfigurationChange!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>!
static DataCore.Adapter.AssetModel.AssetModelNodeBuilder.Create() -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
static DataCore.Adapter.AssetModel.AssetModelNodeBuilder.CreateFromExisting(DataCore.Adapter.AssetModel.AssetModelNode! other) -> DataCore.Adapter.AssetModel.AssetModelNodeBuilder!
static DataCore.Adapter.AssetModel.AssetModelNodeExtensions.ApplyFilter(this System.Collections.Generic.IEnumerable<DataCore.Adapter.AssetModel.AssetModelNode!>! nodes, DataCore.Adapter.AssetModel.BrowseAssetModelNodesRequest? filter) -> System.Collections.Generic.IEnumerable<DataCore.Adapter.AssetModel.AssetModelNode!>!
static DataCore.Adapter.AssetModel.AssetModelNodeExtensions.ApplyFilter(this System.Collections.Generic.IEnumerable<DataCore.Adapter.AssetModel.AssetModelNode!>! nodes, DataCore.Adapter.AssetModel.FindAssetModelNodesRequest? filter) -> System.Collections.Generic.IEnumerable<DataCore.Adapter.AssetModel.AssetModelNode!>!
static DataCore.Adapter.AssetModel.AssetModelNodeExtensions.MatchesFilter(this DataCore.Adapter.AssetModel.AssetModelNode! node, DataCore.Adapter.AssetModel.FindAssetModelNodesRequest? filter) -> bool
static DataCore.Adapter.ChannelExtensions.CreateAssetModelNodeChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.AssetModel.AssetModelNode!>!
static DataCore.Adapter.ChannelExtensions.CreateChannel<T>(int capacity, bool singleReader = true, bool singleWriter = true, System.Threading.Channels.BoundedChannelFullMode fullMode = System.Threading.Channels.BoundedChannelFullMode.Wait) -> System.Threading.Channels.Channel<T>!
static DataCore.Adapter.ChannelExtensions.CreateEventMessageChannel<T>(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<T!>!
static DataCore.Adapter.ChannelExtensions.CreateEventMessageWriteChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.Events.WriteEventMessageItem!>!
static DataCore.Adapter.ChannelExtensions.CreateEventMessageWriteResultChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.Events.WriteEventMessageResult!>!
static DataCore.Adapter.ChannelExtensions.CreateProcessedTagValueChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.RealTimeData.ProcessedTagValueQueryResult!>!
static DataCore.Adapter.ChannelExtensions.CreateProcessedTagValueChannel(System.Threading.Channels.BoundedChannelFullMode fullMode, int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.RealTimeData.ProcessedTagValueQueryResult!>!
static DataCore.Adapter.ChannelExtensions.CreateTagDefinitionChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.Tags.TagDefinition!>!
static DataCore.Adapter.ChannelExtensions.CreateTagIdentifierChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.Tags.TagIdentifier!>!
static DataCore.Adapter.ChannelExtensions.CreateTagValueAnnotationChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.RealTimeData.TagValueAnnotationQueryResult!>!
static DataCore.Adapter.ChannelExtensions.CreateTagValueChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
static DataCore.Adapter.ChannelExtensions.CreateTagValueChannel(System.Threading.Channels.BoundedChannelFullMode fullMode, int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
static DataCore.Adapter.ChannelExtensions.CreateTagValueChannel<T>(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<T!>!
static DataCore.Adapter.ChannelExtensions.CreateTagValueChannel<T>(System.Threading.Channels.BoundedChannelFullMode fullMode, int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<T!>!
static DataCore.Adapter.ChannelExtensions.CreateTagValueWriteChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.RealTimeData.WriteTagValueItem!>!
static DataCore.Adapter.ChannelExtensions.CreateTagValueWriteResultChannel(int capacity = 100, bool singleReader = true, bool singleWriter = true) -> System.Threading.Channels.Channel<DataCore.Adapter.RealTimeData.WriteTagValueResult!>!
static DataCore.Adapter.ChannelExtensions.ForEachAsync<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Func<T, System.Threading.Tasks.Task!>! callback, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
static DataCore.Adapter.ChannelExtensions.Forward<T>(this System.Threading.Channels.ChannelReader<T>! source, System.Threading.Channels.ChannelWriter<T>! destination, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static DataCore.Adapter.ChannelExtensions.PublishToChannel<T>(this System.Collections.Generic.IEnumerable<T>! items) -> System.Threading.Channels.ChannelReader<T>!
static DataCore.Adapter.ChannelExtensions.PublishToChannel<T>(this System.Collections.Generic.IEnumerable<T>! items, System.Threading.Channels.ChannelWriter<T>! channel) -> void
static DataCore.Adapter.ChannelExtensions.PublishToChannelAsync<T>(this System.Collections.Generic.IEnumerable<T>! items, System.Threading.Channels.ChannelWriter<T>! channel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Action<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken>! workItem, System.Threading.Channels.ChannelReader<T>! channel, bool captureParentActivity = true, params System.Threading.CancellationToken[]! cancellationTokens) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Action<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken>! workItem, System.Threading.Channels.ChannelReader<T>! channel, bool captureParentActivity = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Action<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken>! workItem, System.Threading.Channels.ChannelReader<T>! channel, params System.Threading.CancellationToken[]! cancellationTokens) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Action<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken>! workItem, System.Threading.Channels.ChannelReader<T>! channel, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Action<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken>! workItem, System.Threading.Channels.ChannelWriter<T>! channel, bool complete = true, bool captureParentActivity = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Action<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken>! workItem, System.Threading.Channels.ChannelWriter<T>! channel, bool complete = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Action<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken>! workItem, System.Threading.Channels.ChannelWriter<T>! channel, bool complete, bool captureParentActivity = true, params System.Threading.CancellationToken[]! cancellationTokens) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Action<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken>! workItem, System.Threading.Channels.ChannelWriter<T>! channel, bool complete, params System.Threading.CancellationToken[]! cancellationTokens) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Func<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! workItem, System.Threading.Channels.ChannelReader<T>! channel, bool captureParentActivity = true, params System.Threading.CancellationToken[]! cancellationTokens) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Func<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! workItem, System.Threading.Channels.ChannelReader<T>! channel, bool captureParentActivity = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Func<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! workItem, System.Threading.Channels.ChannelReader<T>! channel, params System.Threading.CancellationToken[]! cancellationTokens) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Func<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! workItem, System.Threading.Channels.ChannelReader<T>! channel, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Func<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! workItem, System.Threading.Channels.ChannelWriter<T>! channel, bool complete = true, bool captureParentActivity = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Func<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! workItem, System.Threading.Channels.ChannelWriter<T>! channel, bool complete = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Func<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! workItem, System.Threading.Channels.ChannelWriter<T>! channel, bool complete, bool captureParentActivity = true, params System.Threading.CancellationToken[]! cancellationTokens) -> void
static DataCore.Adapter.ChannelExtensions.QueueBackgroundChannelOperation<T>(this IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService, System.Func<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! workItem, System.Threading.Channels.ChannelWriter<T>! channel, bool complete, params System.Threading.CancellationToken[]! cancellationTokens) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Action<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken>! func, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, bool captureParentActivity = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Action<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken>! func, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, bool captureParentActivity = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Action<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken>! func, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Action<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken>! func, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Func<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! func, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, bool captureParentActivity = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Func<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! func, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, bool captureParentActivity = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Func<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! func, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelReader<T>! channel, System.Func<System.Threading.Channels.ChannelReader<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! func, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelWriter<T>! channel, System.Action<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken>! func, bool complete = true, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, bool captureParentActivity = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelWriter<T>! channel, System.Action<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken>! func, bool complete = true, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, bool captureParentActivity = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelWriter<T>! channel, System.Action<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken>! func, bool complete = true, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelWriter<T>! channel, System.Action<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken>! func, bool complete = true, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelWriter<T>! channel, System.Func<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! func, bool complete = true, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, bool captureParentActivity = true, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelWriter<T>! channel, System.Func<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! func, bool complete = true, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, bool captureParentActivity = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelWriter<T>! channel, System.Func<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! func, bool complete = true, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Collections.Generic.IEnumerable<System.Threading.CancellationToken>? cancellationTokens = null) -> void
static DataCore.Adapter.ChannelExtensions.RunBackgroundOperation<T>(this System.Threading.Channels.ChannelWriter<T>! channel, System.Func<System.Threading.Channels.ChannelWriter<T>!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! func, bool complete = true, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static DataCore.Adapter.ChannelExtensions.ToAsyncEnumerable<T>(this System.Collections.Generic.IEnumerable<T>! enumerable, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<T>!
static DataCore.Adapter.ChannelExtensions.ToEnumerable<T>(this System.Collections.Generic.IAsyncEnumerable<T>! enumerable, int maxItems, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static DataCore.Adapter.ChannelExtensions.ToEnumerable<T>(this System.Collections.Generic.IAsyncEnumerable<T>! enumerable, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static DataCore.Adapter.ChannelExtensions.ToEnumerable<T>(this System.Threading.Channels.ChannelReader<T>! channel, int maxItems = -1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static DataCore.Adapter.ChannelExtensions.Transform<TIn, TOut>(this System.Collections.Generic.IAsyncEnumerable<TIn>! enumerable, System.Func<TIn, TOut>! callback, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<TOut>!
static DataCore.Adapter.ChannelExtensions.Transform<TIn, TOut>(this System.Threading.Channels.ChannelReader<TIn>! channel, System.Func<TIn, TOut>! callback, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Channels.ChannelReader<TOut>!
static DataCore.Adapter.Common.AdapterPropertyExtensions.FindProperty(this System.Collections.Generic.IEnumerable<DataCore.Adapter.Common.AdapterProperty!>! properties, string! name) -> DataCore.Adapter.Common.AdapterProperty?
static DataCore.Adapter.Events.EventFeatureExtensions.WriteEventMessages(this DataCore.Adapter.Events.IWriteEventMessages! feature, DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Events.WriteEventMessagesRequest! request, System.Collections.Generic.IEnumerable<DataCore.Adapter.Events.WriteEventMessageItem!>! events, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.Events.WriteEventMessageResult!>!>!
static DataCore.Adapter.Events.EventMessageBuilder.Create() -> DataCore.Adapter.Events.EventMessageBuilder!
static DataCore.Adapter.Events.EventMessageBuilder.CreateFromExisting(DataCore.Adapter.Events.EventMessage! other) -> DataCore.Adapter.Events.EventMessageBuilder!
static DataCore.Adapter.Events.EventMessagePushWithTopicsExtensions.Subscribe(this DataCore.Adapter.Events.IEventMessagePushWithTopics! feature, DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Events.CreateEventMessageTopicSubscriptionRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.EventMessage!>!
static DataCore.Adapter.Events.EventMessagePushWithTopicsExtensions.Subscribe(this DataCore.Adapter.Events.IEventMessagePushWithTopics! feature, DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Events.CreateEventMessageTopicSubscriptionRequest! request, System.Threading.Channels.ChannelReader<DataCore.Adapter.Events.EventMessageSubscriptionUpdate!>! subscriptionUpdates, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Events.EventMessage!>!
static DataCore.Adapter.Extensions.AdapterExtensionFeature.CreateOperationDescriptor<TFeature>(DataCore.Adapter.Extensions.ExtensionFeatureOperationType operationType, string! name, string? description, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? inputParameters, System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationParameterDescriptor!>? outputParameters) -> DataCore.Adapter.Extensions.ExtensionFeatureOperationDescriptor!
static DataCore.Adapter.Extensions.AdapterExtensionFeature.GetOperationUri(System.Type! featureType, string! unqualifiedName, DataCore.Adapter.Extensions.ExtensionFeatureOperationType operationType) -> System.Uri!
static DataCore.Adapter.Extensions.AdapterExtensionFeature.GetOperationUri<TFeature>(string! unqualifiedName, DataCore.Adapter.Extensions.ExtensionFeatureOperationType operationType) -> System.Uri!
static DataCore.Adapter.Extensions.AdapterExtensionFeature.TryGetFeatureUriFromOperationUri(System.Uri! operationUri, out System.Uri! featureUri, out string? error) -> bool
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.ConvertFromVariant<T>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.Common.Variant value) -> T?
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.ConvertToVariant<T>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, T? value) -> DataCore.Adapter.Common.Variant
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.DuplexStream<T1, T2>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, System.Collections.Generic.IAsyncEnumerable<T1?>! channel, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T2?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.GetDescriptor(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, string! uriString, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Common.FeatureDescriptor?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.GetOperations(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, string! uriString, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationDescriptor!>!>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, T5? argument5, T6? argument6, T7? argument7, T8? argument8, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T9?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T1, T2, T3, T4, T5, T6, T7, T8>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, T5? argument5, T6? argument6, T7? argument7, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T8?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T1, T2, T3, T4, T5, T6, T7>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, T5? argument5, T6? argument6, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T7?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T1, T2, T3, T4, T5, T6>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, T5? argument5, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T6?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T1, T2, T3, T4, T5>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T5?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T1, T2, T3, T4>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T4?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T1, T2, T3>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T3?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T1, T2>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T2?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Invoke<T>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, T5? argument5, T6? argument6, T7? argument7, T8? argument8, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T9?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T1, T2, T3, T4, T5, T6, T7, T8>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, T5? argument5, T6? argument6, T7? argument7, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T8?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T1, T2, T3, T4, T5, T6, T7>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, T5? argument5, T6? argument6, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T7?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T1, T2, T3, T4, T5, T6>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, T5? argument5, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T6?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T1, T2, T3, T4, T5>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, T4? argument4, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T5?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T1, T2, T3, T4>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, T3? argument3, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T4?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T1, T2, T3>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument1, T2? argument2, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T3?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T1, T2>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, T1? argument, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T2?>!
static DataCore.Adapter.Extensions.AdapterExtensionFeatureExtensions.Stream<T>(this DataCore.Adapter.Extensions.IAdapterExtensionFeature! feature, DataCore.Adapter.IAdapterCallContext! context, System.Uri! operationId, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<T?>!
static DataCore.Adapter.Extensions.CustomFunctions.CreateHandler<TRequest, TResponse>(DataCore.Adapter.Extensions.CustomFunctionHandler<TRequest, TResponse>! innerHandler, System.Text.Json.JsonSerializerOptions? jsonOptions = null) -> DataCore.Adapter.Extensions.CustomFunctionHandler!
static DataCore.Adapter.Extensions.CustomFunctions.CreateHandler<TResponse>(DataCore.Adapter.Extensions.CustomFunctionHandler<TResponse>! innerHandler, System.Text.Json.JsonSerializerOptions? jsonOptions = null) -> DataCore.Adapter.Extensions.CustomFunctionHandler!
static DataCore.Adapter.Extensions.CustomFunctions.TryValidate(System.Text.Json.JsonElement data, System.Text.Json.JsonElement schema, System.Text.Json.JsonSerializerOptions? jsonOptions, out System.Text.Json.JsonElement validationResults) -> bool
static DataCore.Adapter.Extensions.CustomFunctionValidationExtensions.TryValidateBody(this DataCore.Adapter.Extensions.CustomFunctionInvocationRequest! request, DataCore.Adapter.Extensions.CustomFunctionDescriptorExtended! functionDescriptor, System.Text.Json.JsonSerializerOptions? jsonOptions, out System.Text.Json.JsonElement validationResults) -> bool
static DataCore.Adapter.Json.Schema.JsonSchemaUtility.CreateJsonSchema<T>(System.Text.Json.JsonSerializerOptions? options = null) -> System.Text.Json.JsonElement
static DataCore.Adapter.Json.Schema.JsonSchemaUtility.TryValidate(System.Text.Json.JsonElement data, System.Text.Json.JsonElement schema, System.Text.Json.JsonSerializerOptions? jsonOptions, out System.Text.Json.JsonElement validationResults) -> bool
static DataCore.Adapter.PatternMatchingExtensions.Like(this string? s, string! pattern) -> bool
static DataCore.Adapter.PatternMatchingExtensions.Like(this string? s, System.Text.RegularExpressions.Regex! expression) -> bool
static DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.ForAdapter(DataCore.Adapter.IAdapter! adapter) -> DataCore.Adapter.RealTimeData.ReadHistoricalTagValues!
static DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.GetDefaultDataFunctions() -> System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.DataFunctionDescriptor!>!
static DataCore.Adapter.RealTimeData.ReadHistoricalTagValues.IsCompatible(DataCore.Adapter.IAdapter! adapter) -> bool
static DataCore.Adapter.RealTimeData.RealTimeDataFeatureExtensions.WriteHistoricalTagValues(this DataCore.Adapter.RealTimeData.IWriteHistoricalTagValues! feature, DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.WriteTagValuesRequest! request, System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.WriteTagValueItem!>! values, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.WriteTagValueResult!>!>!
static DataCore.Adapter.RealTimeData.RealTimeDataFeatureExtensions.WriteSnapshotTagValues(this DataCore.Adapter.RealTimeData.IWriteSnapshotTagValues! feature, DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.WriteTagValuesRequest! request, System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.WriteTagValueItem!>! values, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.WriteTagValueResult!>!>!
static DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.CreateTagResolverFromAdapter(DataCore.Adapter.IAdapter! adapter) -> DataCore.Adapter.Tags.TagResolver!
static DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.CreateTagResolverFromFeature(DataCore.Adapter.Tags.ITagInfo! feature) -> DataCore.Adapter.Tags.TagResolver!
static DataCore.Adapter.RealTimeData.SnapshotTagValuePushExtensions.Subscribe(this DataCore.Adapter.RealTimeData.ISnapshotTagValuePush! feature, DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.CreateSnapshotTagValueSubscriptionRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
static DataCore.Adapter.RealTimeData.SnapshotTagValuePushExtensions.Subscribe(this DataCore.Adapter.RealTimeData.ISnapshotTagValuePush! feature, DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.RealTimeData.CreateSnapshotTagValueSubscriptionRequest! request, System.Threading.Channels.ChannelReader<DataCore.Adapter.RealTimeData.TagValueSubscriptionUpdate!>! subscriptionUpdates, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
static DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.Create() -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
static DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder.CreateFromExisting(DataCore.Adapter.RealTimeData.TagValueAnnotationExtended! other) -> DataCore.Adapter.RealTimeData.TagValueAnnotationBuilder!
static DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.CreateTagResolverFromAdapter(DataCore.Adapter.IAdapter! adapter) -> DataCore.Adapter.Tags.TagResolver!
static DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.CreateTagResolverFromFeature(DataCore.Adapter.Tags.ITagInfo! feature) -> DataCore.Adapter.Tags.TagResolver!
static DataCore.Adapter.RealTimeData.TagValueBuilder.Create() -> DataCore.Adapter.RealTimeData.TagValueBuilder!
static DataCore.Adapter.RealTimeData.TagValueBuilder.CreateFromExisting(DataCore.Adapter.RealTimeData.TagValueExtended! other) -> DataCore.Adapter.RealTimeData.TagValueBuilder!
static DataCore.Adapter.RealTimeData.Utilities.AggregationHelper.GetDefaultDataFunctions() -> System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.DataFunctionDescriptor!>!
static DataCore.Adapter.RealTimeData.Utilities.InterpolationHelper.GetInterpolatedValueAtSampleTime(DataCore.Adapter.Tags.TagSummary! tag, System.DateTime utcSampleTime, DataCore.Adapter.RealTimeData.TagValueExtended! valueBefore, DataCore.Adapter.RealTimeData.TagValueExtended! valueAfter, bool forceUncertainStatus = false) -> DataCore.Adapter.RealTimeData.TagValueExtended?
static DataCore.Adapter.RealTimeData.Utilities.InterpolationHelper.GetInterpolatedValueAtSampleTime(DataCore.Adapter.Tags.TagSummary! tag, System.DateTime utcSampleTime, System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.TagValueExtended!>! values) -> DataCore.Adapter.RealTimeData.TagValueExtended?
static DataCore.Adapter.RealTimeData.Utilities.InterpolationHelper.GetPreviousValueAtSampleTime(DataCore.Adapter.Tags.TagSummary! tag, System.DateTime utcSampleTime, DataCore.Adapter.RealTimeData.TagValueExtended! valueBefore, bool forceUncertainStatus = false) -> DataCore.Adapter.RealTimeData.TagValueExtended?
static DataCore.Adapter.RealTimeData.Utilities.InterpolationHelper.GetPreviousValuesAtSampleTimes(DataCore.Adapter.Tags.TagSummary! tag, System.Collections.Generic.IEnumerable<System.DateTime>! utcSampleTimes, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>! rawData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
static DataCore.Adapter.RealTimeData.Utilities.InterpolationHelper.InterpolateValue(double x, double x0, double x1, double y0, double y1) -> double
static DataCore.Adapter.RealTimeData.Utilities.PlotHelper.CalculateBucketSize(System.DateTime utcStartTime, System.DateTime utcEndTime, int intervals) -> System.TimeSpan
static DataCore.Adapter.RealTimeData.Utilities.PlotHelper.DefaultPlotValueSelector(DataCore.Adapter.Tags.TagSummary! tag, DataCore.Adapter.RealTimeData.Utilities.TagValueBucket! bucket) -> System.Collections.Generic.IEnumerable<DataCore.Adapter.RealTimeData.Utilities.PlotValue>!
static DataCore.Adapter.RealTimeData.Utilities.PlotHelper.GetPlotValues(DataCore.Adapter.Tags.TagSummary! tag, System.DateTime utcStartTime, System.DateTime utcEndTime, System.TimeSpan bucketSize, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>! rawData, DataCore.Adapter.RealTimeData.Utilities.PlotValueSelector? valueSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
static DataCore.Adapter.RealTimeData.Utilities.PlotHelper.GetPlotValues(DataCore.Adapter.Tags.TagSummary! tag, System.DateTime utcStartTime, System.DateTime utcEndTime, System.TimeSpan bucketSize, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>! rawData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
static DataCore.Adapter.RealTimeData.Utilities.PlotHelper.GetPlotValues(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagSummary!>! tags, System.DateTime utcStartTime, System.DateTime utcEndTime, System.TimeSpan bucketSize, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>! rawData, IntelligentPlant.BackgroundTasks.IBackgroundTaskService? backgroundTaskService = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.RealTimeData.TagValueQueryResult!>!
static DataCore.Adapter.ResolvedAdapterFeature<TFeature>.operator !=(DataCore.Adapter.ResolvedAdapterFeature<TFeature> left, DataCore.Adapter.ResolvedAdapterFeature<TFeature> right) -> bool
static DataCore.Adapter.ResolvedAdapterFeature<TFeature>.operator ==(DataCore.Adapter.ResolvedAdapterFeature<TFeature> left, DataCore.Adapter.ResolvedAdapterFeature<TFeature> right) -> bool
static DataCore.Adapter.Security.CertificateUtilities.PemEncode(byte[]! bytes, string? label = null, System.Collections.Generic.IEnumerable<string!>? explanatoryText = null) -> string!
static DataCore.Adapter.Security.CertificateUtilities.PemEncode(params System.Security.Cryptography.X509Certificates.X509Certificate2![]! certificates) -> string!
static DataCore.Adapter.Security.CertificateUtilities.PemEncode(System.Collections.Generic.IEnumerable<System.Security.Cryptography.X509Certificates.X509Certificate2!>! certificates) -> string!
static DataCore.Adapter.Security.CertificateUtilities.PemEncode(System.Security.Cryptography.X509Certificates.X509Certificate2! certificate, bool encodeChain = false) -> string!
static DataCore.Adapter.Security.CertificateUtilities.SelectCertificate(System.Collections.Generic.IEnumerable<System.Security.Cryptography.X509Certificates.X509Certificate2!>? certificates) -> System.Security.Cryptography.X509Certificates.X509Certificate2?
static DataCore.Adapter.Security.CertificateUtilities.TryLoadCertificateFromStore(string! path, out System.Security.Cryptography.X509Certificates.X509Certificate2? certificate) -> bool
static DataCore.Adapter.Security.CertificateUtilities.TryParseCertificateStorePath(string! path, out System.Security.Cryptography.X509Certificates.StoreLocation location, out string! name, out string! thumbprintOrSubjectName) -> bool
static DataCore.Adapter.Tags.TagDefinitionBuilder.Create() -> DataCore.Adapter.Tags.TagDefinitionBuilder!
static DataCore.Adapter.Tags.TagDefinitionBuilder.Create(string! id, string! name) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
static DataCore.Adapter.Tags.TagDefinitionBuilder.CreateFromExisting(DataCore.Adapter.Tags.TagDefinition! existing) -> DataCore.Adapter.Tags.TagDefinitionBuilder!
static DataCore.Adapter.Tags.TagDefinitionExtensions.ApplyFilter(this System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagDefinition!>! tags, DataCore.Adapter.Tags.FindTagsRequest? filter) -> System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagDefinition!>!
static DataCore.Adapter.Tags.TagDefinitionExtensions.Clone(this DataCore.Adapter.Tags.TagDefinition! tag, DataCore.Adapter.Tags.TagDefinitionFields fields = DataCore.Adapter.Tags.TagDefinitionFields.All) -> DataCore.Adapter.Tags.TagDefinition!
static DataCore.Adapter.Tags.TagDefinitionExtensions.MatchesFilter(this DataCore.Adapter.Tags.TagDefinition! tag, DataCore.Adapter.Tags.FindTagsRequest? filter) -> bool
static DataCore.Adapter.Tags.TagManager.CreateConfigurationChangeDelegate(DataCore.Adapter.Diagnostics.ConfigurationChanges! configurationChanges) -> System.Func<DataCore.Adapter.Diagnostics.ConfigurationChange!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask>!
static DataCore.Adapter.ValidationExtensions.ValidateObject(object! o, bool canBeNull = false) -> void
static readonly DataCore.Adapter.RealTimeData.PollingSnapshotTagValuePush.DefaultPollingInterval -> System.TimeSpan
virtual DataCore.Adapter.AdapterBase<TAdapterOptions>.CheckHealthAsync(DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.Diagnostics.HealthCheckResult>!>!
virtual DataCore.Adapter.AdapterBase<TAdapterOptions>.OnOptionsChange(TAdapterOptions! options) -> void
virtual DataCore.Adapter.Events.EventMessagePushWithTopics.OnTopicsAdded(System.Collections.Generic.IEnumerable<string!>! topics, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual DataCore.Adapter.Events.EventMessagePushWithTopics.OnTopicsRemoved(System.Collections.Generic.IEnumerable<string!>! topics, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual DataCore.Adapter.Extensions.AdapterExtensionFeature.DuplexStreamInternal(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.DuplexStreamInvocationRequest! request, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationStreamItem!>! channel, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!
virtual DataCore.Adapter.Extensions.AdapterExtensionFeature.GetDescriptorInternal(DataCore.Adapter.IAdapterCallContext! context, System.Uri? featureUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Common.FeatureDescriptor?>!
virtual DataCore.Adapter.Extensions.AdapterExtensionFeature.GetOperationsInternal(DataCore.Adapter.IAdapterCallContext! context, System.Uri? featureUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationDescriptor!>!>!
virtual DataCore.Adapter.Extensions.AdapterExtensionFeature.InvokeInternal(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.InvocationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Extensions.InvocationResponse!>!
virtual DataCore.Adapter.Extensions.AdapterExtensionFeature.StreamInternal(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.InvocationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!
virtual DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.OnTagsAdded(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.OnTagsRemoved(System.Collections.Generic.IEnumerable<DataCore.Adapter.Tags.TagIdentifier!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual DataCore.Adapter.RealTimeData.SnapshotTagValuePushBase.ResolveTags(DataCore.Adapter.IAdapterCallContext! context, System.Collections.Generic.IEnumerable<string!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Tags.TagIdentifier!>!
virtual DataCore.Adapter.RealTimeData.TagValueAnnotationManagerBase.ResolveTagsAsync(DataCore.Adapter.IAdapterCallContext! context, System.Collections.Generic.IEnumerable<string!>! tags, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Tags.TagIdentifier!>!
virtual DataCore.Adapter.SubscriptionChannel<TTopic, TValue>.Dispose(bool disposing) -> void
virtual DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.Dispose(bool disposing) -> void
virtual DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.GetHealthCheckProperties(DataCore.Adapter.IAdapterCallContext! context) -> System.Collections.Generic.IDictionary<string!, string!>!
virtual DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.IsTopicMatch(TValue value, System.Collections.Generic.IEnumerable<TTopic>! topics, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
virtual DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.OnSubscriptionAddedAsync(TSubscription! subscription, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.OnSubscriptionCancelledAsync(TSubscription! subscription, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual DataCore.Adapter.SubscriptionManager<TOptions, TTopic, TValue, TSubscription>.ValueReceived(TValue message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
~static DataCore.Adapter.AdapterOptionsResources.AdapterOptions_Description_Description.get -> string
~static DataCore.Adapter.AdapterOptionsResources.AdapterOptions_Description_DisplayName.get -> string
~static DataCore.Adapter.AdapterOptionsResources.AdapterOptions_Description_MaxLength_Error.get -> string
~static DataCore.Adapter.AdapterOptionsResources.AdapterOptions_IsEnabled_Description.get -> string
~static DataCore.Adapter.AdapterOptionsResources.AdapterOptions_IsEnabled_DisplayName.get -> string
~static DataCore.Adapter.AdapterOptionsResources.AdapterOptions_Name_Description.get -> string
~static DataCore.Adapter.AdapterOptionsResources.AdapterOptions_Name_DisplayName.get -> string
~static DataCore.Adapter.AdapterOptionsResources.AdapterOptions_Name_MaxLength_Error.get -> string
~static DataCore.Adapter.AdapterOptionsResources.Culture.get -> System.Globalization.CultureInfo
~static DataCore.Adapter.AdapterOptionsResources.Culture.set -> void
~static DataCore.Adapter.AdapterOptionsResources.ResourceManager.get -> System.Resources.ResourceManager
