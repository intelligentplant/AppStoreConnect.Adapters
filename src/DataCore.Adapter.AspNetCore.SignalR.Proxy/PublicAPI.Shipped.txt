#nullable enable
DataCore.Adapter.AspNetCore.SignalR.Proxy.ConnectionFactory
DataCore.Adapter.AspNetCore.SignalR.Proxy.Extensions.AdapterExtensionFeatureImpl
DataCore.Adapter.AspNetCore.SignalR.Proxy.Extensions.AdapterExtensionFeatureImpl.AdapterExtensionFeatureImpl(DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy! proxy) -> void
DataCore.Adapter.AspNetCore.SignalR.Proxy.ProxyAdapterFeature
DataCore.Adapter.AspNetCore.SignalR.Proxy.ProxyAdapterFeature.AdapterId.get -> string!
DataCore.Adapter.AspNetCore.SignalR.Proxy.ProxyAdapterFeature.BackgroundTaskService.get -> IntelligentPlant.BackgroundTasks.IBackgroundTaskService!
DataCore.Adapter.AspNetCore.SignalR.Proxy.ProxyAdapterFeature.GetClient() -> DataCore.Adapter.AspNetCore.SignalR.Client.AdapterSignalRClient!
DataCore.Adapter.AspNetCore.SignalR.Proxy.ProxyAdapterFeature.Logger.get -> Microsoft.Extensions.Logging.ILogger!
DataCore.Adapter.AspNetCore.SignalR.Proxy.ProxyAdapterFeature.Proxy.get -> DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy!
DataCore.Adapter.AspNetCore.SignalR.Proxy.ProxyAdapterFeature.ProxyAdapterFeature(DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy! proxy) -> void
DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.GetClient() -> DataCore.Adapter.AspNetCore.SignalR.Client.AdapterSignalRClient!
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.GetOrCreateExtensionHubConnection(string! key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.SignalR.Client.HubConnection!>!
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.RemoteDescriptor.get -> DataCore.Adapter.Common.AdapterDescriptorExtended!
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.RemoteHostInfo.get -> DataCore.Adapter.Common.HostInfo!
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.CompatibilityLevel.get -> DataCore.Adapter.AspNetCore.SignalR.Client.CompatibilityLevel
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.CompatibilityLevel.set -> void
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.ConnectionFactory.get -> DataCore.Adapter.AspNetCore.SignalR.Proxy.ConnectionFactory!
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.ConnectionFactory.set -> void
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.ExtensionFeatureFactory.get -> DataCore.Adapter.Proxy.ExtensionFeatureFactory<DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy!>?
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.ExtensionFeatureFactory.set -> void
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.RemoteId.get -> string!
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.RemoteId.set -> void
DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxyOptions.SignalRAdapterProxyOptions() -> void
override DataCore.Adapter.AspNetCore.SignalR.Proxy.Extensions.AdapterExtensionFeatureImpl.DuplexStreamInternal(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.DuplexStreamInvocationRequest! request, System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationStreamItem!>! channel, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!
override DataCore.Adapter.AspNetCore.SignalR.Proxy.Extensions.AdapterExtensionFeatureImpl.GetDescriptorFromRemoteAdapter(DataCore.Adapter.IAdapterCallContext! context, System.Uri? featureUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Common.FeatureDescriptor?>!
override DataCore.Adapter.AspNetCore.SignalR.Proxy.Extensions.AdapterExtensionFeatureImpl.GetOperationsFromRemoteAdapter(DataCore.Adapter.IAdapterCallContext! context, System.Uri? featureUri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.Extensions.ExtensionFeatureOperationDescriptor!>!>!
override DataCore.Adapter.AspNetCore.SignalR.Proxy.Extensions.AdapterExtensionFeatureImpl.InvokeInternal(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.InvocationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DataCore.Adapter.Extensions.InvocationResponse!>!
override DataCore.Adapter.AspNetCore.SignalR.Proxy.Extensions.AdapterExtensionFeatureImpl.StreamInternal(DataCore.Adapter.IAdapterCallContext! context, DataCore.Adapter.Extensions.InvocationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<DataCore.Adapter.Extensions.InvocationResponse!>!
override DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.CheckHealthAsync(DataCore.Adapter.IAdapterCallContext! context, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataCore.Adapter.Diagnostics.HealthCheckResult>!>!
override DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.Dispose(bool disposing) -> void
override DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.DisposeAsyncCore() -> System.Threading.Tasks.ValueTask
override DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override DataCore.Adapter.AspNetCore.SignalR.Proxy.SignalRAdapterProxy.StopAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.AdapterMetadata_Description.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.AdapterMetadata_DisplayName.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Culture.get -> System.Globalization.CultureInfo
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Culture.set -> void
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Error_AdapterIdIsRequired.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Error_ConnectionFactoryIsRequired.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.HealthCheck_DisplayName_Connection.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.HealthCheck_DisplayName_RemoteAdapter.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.HealthCheck_ExtensionHubConnectionStatusDescription.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.HealthCheck_HubConnectionStatusDescription.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.HealthCheck_HubConnectionStatusDescriptionNoInnerResults.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.HealthCheck_RemoteAdapterHealthNotSupported.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.HealthCheck_UnknownConnectionState.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.HeathCheck_DisplayName_ExtensionConnection.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Log_EventsSubscriptionError.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Log_ExtensionFeatureRegistrationError.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Log_NoExtensionImplementationAvailable.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Log_SnapshotTagValueSubscriptionError.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.Log_SubscriptionDisposeError.get -> string
~static DataCore.Adapter.AspNetCore.SignalR.Proxy.Resources.ResourceManager.get -> System.Resources.ResourceManager
