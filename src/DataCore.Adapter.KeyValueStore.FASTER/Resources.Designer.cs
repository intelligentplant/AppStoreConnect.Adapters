//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataCore.Adapter.KeyValueStore.FASTER {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DataCore.Adapter.KeyValueStore.FASTER.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checkpoint management is disabled..
        /// </summary>
        internal static string Error_CheckpointsAreDisabled {
            get {
                return ResourceManager.GetString("Error_CheckpointsAreDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed on a read-only store..
        /// </summary>
        internal static string Error_StoreIsReadOnly {
            get {
                return ResourceManager.GetString("Error_StoreIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while compacting the FASTER log..
        /// </summary>
        internal static string Log_CompactionError {
            get {
                return ResourceManager.GetString("Log_CompactionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while creating a recovery checkpoint for the FASTER log..
        /// </summary>
        internal static string Log_ErrorWhileCreatingCheckpoint {
            get {
                return ResourceManager.GetString("Log_ErrorWhileCreatingCheckpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while recovering the FASTER log from the last checkpoint..
        /// </summary>
        internal static string Log_ErrorWhileRecoveringCheckpoint {
            get {
                return ResourceManager.GetString("Log_ErrorWhileRecoveringCheckpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FASTER log compacted. Safe read-only region size before: {0} bytes. After: {1} bytes. Consecutive compactions: {2}..
        /// </summary>
        internal static string Log_LogCompacted {
            get {
                return ResourceManager.GetString("Log_LogCompacted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FASTER log compaction threshold increased. Before: {0} bytes. After: {1} bytes..
        /// </summary>
        internal static string Log_LogCompactionThresholdIncreased {
            get {
                return ResourceManager.GetString("Log_LogCompactionThresholdIncreased", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checkpoint management is disabled; backup and restore of data will not be performed..
        /// </summary>
        internal static string Log_NoCheckpointManagerProvided {
            get {
                return ResourceManager.GetString("Log_NoCheckpointManagerProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipping FASTER log compaction. Safe read-only region size: {0} bytes. Threshold: {1} bytes.
        /// </summary>
        internal static string Log_SkippingLogCompaction {
            get {
                return ResourceManager.GetString("Log_SkippingLogCompaction", resourceCulture);
            }
        }
    }
}
