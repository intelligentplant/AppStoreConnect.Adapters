<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Category_AssetModel" xml:space="preserve">
    <value>Asset Model</value>
  </data>
  <data name="Category_Diagnostics" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="Category_Events" xml:space="preserve">
    <value>Alarms &amp; Events</value>
  </data>
  <data name="Category_Extensions" xml:space="preserve">
    <value>Extensions</value>
  </data>
  <data name="Category_RealTimeData" xml:space="preserve">
    <value>Real-Time Data</value>
  </data>
  <data name="Category_Tags" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="DataFunction_Avg_Description" xml:space="preserve">
    <value>Average value calculated over sample interval.</value>
  </data>
  <data name="DataFunction_Avg_Name" xml:space="preserve">
    <value>Average</value>
  </data>
  <data name="DataFunction_Count_Description" xml:space="preserve">
    <value>The number of good-quality raw samples that have been recorded for the tag at each sample interval.</value>
  </data>
  <data name="DataFunction_Count_Name" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="DataFunction_Delta_Description" xml:space="preserve">
    <value>The signed difference between the earliest good-quality value and latest good-quality value in each sample interval.</value>
  </data>
  <data name="DataFunction_Delta_Name" xml:space="preserve">
    <value>Delta</value>
  </data>
  <data name="DataFunction_Interp_Description" xml:space="preserve">
    <value>Interpolates a value at each sample interval based on the raw values on either side of the sample time for the interval.</value>
  </data>
  <data name="DataFunction_Interp_Name" xml:space="preserve">
    <value>Interpolated</value>
  </data>
  <data name="DataFunction_Max_Description" xml:space="preserve">
    <value>Maximum good-quality value calculated over a fixed sample interval. The calculated value contains the actual timestamp that the maximum value occurred at.</value>
  </data>
  <data name="DataFunction_Max_Name" xml:space="preserve">
    <value>Maximum</value>
  </data>
  <data name="DataFunction_Min_Description" xml:space="preserve">
    <value>Minimum good-quality value calculated over a fixed sample interval. The calculated value contains the actual timestamp that the minimum value occurred at.</value>
  </data>
  <data name="DataFunction_Min_Name" xml:space="preserve">
    <value>Minimum</value>
  </data>
  <data name="DataFunction_PercentBad_Description" xml:space="preserve">
    <value>At each interval in a time range, calculates the percentage of time in the interval that the tag value had a bad-quality status.</value>
  </data>
  <data name="DataFunction_PercentBad_Name" xml:space="preserve">
    <value>Percent Bad</value>
  </data>
  <data name="DataFunction_PercentGood_Description" xml:space="preserve">
    <value>At each interval in a time range, calculates the percentage of time in the interval that the tag value had a good-quality status.</value>
  </data>
  <data name="DataFunction_PercentGood_Name" xml:space="preserve">
    <value>Percent Good</value>
  </data>
  <data name="DataFunction_Property_StatusCalculation" xml:space="preserve">
    <value>Status Calculation</value>
  </data>
  <data name="DataFunction_Property_StatusCalculation_Description" xml:space="preserve">
    <value>The method used to calculate the quality status for the function.</value>
  </data>
  <data name="DataFunction_Property_StatusCalculation_ValueGoodUnlessNonGoodSkipped" xml:space="preserve">
    <value>"Uncertain" if any non-good quality values were skipped, or "Good" otherwise.</value>
  </data>
  <data name="DataFunction_Property_StatusCalculation_ValueWorstCase" xml:space="preserve">
    <value>Worst-case status of the samples used in the calculation.</value>
  </data>
  <data name="DataFunction_Property_TimestampCalculation" xml:space="preserve">
    <value>Timestamp Calculation</value>
  </data>
  <data name="DataFunction_Property_TimestampCalculation_Description" xml:space="preserve">
    <value>The method used to calculate the timestamp for the function.</value>
  </data>
  <data name="DataFunction_Property_TimestampCalculation_ValueMaximum" xml:space="preserve">
    <value>Timestamp of maximum value</value>
  </data>
  <data name="DataFunction_Property_TimestampCalculation_ValueMinimum" xml:space="preserve">
    <value>Timestamp of minimum value</value>
  </data>
  <data name="DataFunction_Range_Description" xml:space="preserve">
    <value>The absolute difference between the minimum good-quality value and maximum good-quality value in each sample interval.</value>
  </data>
  <data name="DataFunction_Range_Name" xml:space="preserve">
    <value>Range</value>
  </data>
  <data name="DataFunction_StandardDeviation_Description" xml:space="preserve">
    <value>The standard deviation of all good-quality values in each sample interval</value>
  </data>
  <data name="DataFunction_StandardDeviation_Name" xml:space="preserve">
    <value>Standard Deviation</value>
  </data>
  <data name="DataFunction_Variance_Description" xml:space="preserve">
    <value>The variance of all good-quality values in each sample interval</value>
  </data>
  <data name="DataFunction_Variance_Name" xml:space="preserve">
    <value>Variance</value>
  </data>
  <data name="Description_AssetModelBrowse" xml:space="preserve">
    <value>Allows browsing of an adapter's asset model hierarchy.</value>
  </data>
  <data name="Description_AssetModelSearch" xml:space="preserve">
    <value>Allows an adapter's asset model hierarchy to be searched.</value>
  </data>
  <data name="Description_ConfigurationChanges" xml:space="preserve">
    <value>Allows subscribers to receive notifications when items on an adapter such as tags or asset model nodes are created, updated, or deleted.</value>
  </data>
  <data name="Description_CustomFunctions" xml:space="preserve">
    <value>Allows invocation of vendor-specific custom functions.</value>
  </data>
  <data name="Description_EventMessagePush" xml:space="preserve">
    <value>Allows subscribers to receive event messages from an adapter in real-time.</value>
  </data>
  <data name="Description_EventMessagePushWithTopics" xml:space="preserve">
    <value>Allows subscribers to receive event messages from an adapter in real-time for specific topics.</value>
  </data>
  <data name="Description_HealthCheck" xml:space="preserve">
    <value>Allows an adapter's health status to be polled or subscribed to.</value>
  </data>
  <data name="Description_ReadEventMessagesForTimeRange" xml:space="preserve">
    <value>Allows the event message history on an adapter to be polled using a time range.</value>
  </data>
  <data name="Description_ReadEventMessagesUsingCursor" xml:space="preserve">
    <value>Allows the event message history on an adapter to be polled using a cursor to define the starting point.</value>
  </data>
  <data name="Description_ReadPlotTagVaues" xml:space="preserve">
    <value>Allows polling of historical tag values using a visualisation-friendly aggregation.</value>
  </data>
  <data name="Description_ReadProcessedTagValues" xml:space="preserve">
    <value>Allows polling of historical tag values using a supported aggregate function to compute the results.</value>
  </data>
  <data name="Description_ReadRawTagValues" xml:space="preserve">
    <value>Allows polling of raw, unprocessed historical tag values.</value>
  </data>
  <data name="Description_ReadSnapshotTagValues" xml:space="preserve">
    <value>Allows polling of snapshot (instantaneous) tag values.</value>
  </data>
  <data name="Description_ReadTagValueAnnotations" xml:space="preserve">
    <value>Allows polling of annotations on historical tag values.</value>
  </data>
  <data name="Description_ReadTagValuesAtTimes" xml:space="preserve">
    <value>Allows polling of tag values at specific timestamps in history.</value>
  </data>
  <data name="Description_SnapshotTagValuePush" xml:space="preserve">
    <value>Allows subscribers to receive snapshot tag value updates from an adapter in real-time.</value>
  </data>
  <data name="Description_TagConfiguration" xml:space="preserve">
    <value>Allows tag definitions to be created, updated and deleted.</value>
  </data>
  <data name="Description_TagInfo" xml:space="preserve">
    <value>Allows retrieval of an adapter's tag definitions using the tag's ID or name.</value>
  </data>
  <data name="Description_TagSearch" xml:space="preserve">
    <value>Allows an adapter's tag definitions to be searched.</value>
  </data>
  <data name="Description_WriteEventMessages" xml:space="preserve">
    <value>Allows an adapter to be used as an event sink for messages generated by external sources.</value>
  </data>
  <data name="Description_WriteHistoricalTagValues" xml:space="preserve">
    <value>Allows tag values from an external source to be written directly into an adapter's history archive.</value>
  </data>
  <data name="Description_WriteSnapshotTagValues" xml:space="preserve">
    <value>Allows the snapshot value of an adapter's tags to be updated from an external source.</value>
  </data>
  <data name="Description_WriteTagValueAnnotations" xml:space="preserve">
    <value>Allows tag value annotations on an adapter to be created, updated, and deleted.</value>
  </data>
  <data name="DisplayName_AssetModelBrowse" xml:space="preserve">
    <value>Asset Model Browsing</value>
  </data>
  <data name="DisplayName_AssetModelSearch" xml:space="preserve">
    <value>Asset Model Search</value>
  </data>
  <data name="DisplayName_ConfigurationChanges" xml:space="preserve">
    <value>Configuration Changes</value>
  </data>
  <data name="DisplayName_CustomFunctions" xml:space="preserve">
    <value>Custom Functions</value>
  </data>
  <data name="DisplayName_EventMessagePush" xml:space="preserve">
    <value>Event Message Push</value>
  </data>
  <data name="DisplayName_EventMessagePushWithTopics" xml:space="preserve">
    <value>Topic-Based Event Message Push</value>
  </data>
  <data name="DisplayName_HealthCheck" xml:space="preserve">
    <value>Health Check</value>
  </data>
  <data name="DisplayName_ReadEventMessagesForTimeRange" xml:space="preserve">
    <value>Time-Based Event Message History</value>
  </data>
  <data name="DisplayName_ReadEventMessagesUsingCursor" xml:space="preserve">
    <value>Cursor-Based Event Message History</value>
  </data>
  <data name="DisplayName_ReadPlotTagVaues" xml:space="preserve">
    <value>Read Plot Tag Values</value>
  </data>
  <data name="DisplayName_ReadProcessedTagValues" xml:space="preserve">
    <value>Read Processed Tag Values</value>
  </data>
  <data name="DisplayName_ReadRawTagValues" xml:space="preserve">
    <value>Read Raw Tag Values</value>
  </data>
  <data name="DisplayName_ReadSnapshotTagValues" xml:space="preserve">
    <value>Read Snapshot Tag Values</value>
  </data>
  <data name="DisplayName_ReadTagValueAnnotations" xml:space="preserve">
    <value>Read Annotations</value>
  </data>
  <data name="DisplayName_ReadTagValuesAtTimes" xml:space="preserve">
    <value>Read Tag Values At Times</value>
  </data>
  <data name="DisplayName_SnapshotTagValuePush" xml:space="preserve">
    <value>Snapshot Tag Value Push</value>
  </data>
  <data name="DisplayName_TagConfiguration" xml:space="preserve">
    <value>Tag Configuration</value>
  </data>
  <data name="DisplayName_TagInfo" xml:space="preserve">
    <value>Tag Information</value>
  </data>
  <data name="DisplayName_TagSearch" xml:space="preserve">
    <value>Tag Search</value>
  </data>
  <data name="DisplayName_WriteEventMessages" xml:space="preserve">
    <value>Write Event Messages</value>
  </data>
  <data name="DisplayName_WriteHistoricalTagValues" xml:space="preserve">
    <value>Write Historical Tag Values</value>
  </data>
  <data name="DisplayName_WriteSnapshotTagValues" xml:space="preserve">
    <value>Write Snapshot Tag Values</value>
  </data>
  <data name="DisplayName_WriteTagValueAnnotations" xml:space="preserve">
    <value>Write Annotations</value>
  </data>
  <data name="Error_AdapterIsNotStarted" xml:space="preserve">
    <value>The adapter has not been started.</value>
  </data>
  <data name="Error_FeatureIsAlreadyRegistered" xml:space="preserve">
    <value>This feature has already been registered.</value>
  </data>
  <data name="Error_KeyValueStore_InvalidKey" xml:space="preserve">
    <value>Zero byte keys are not allowed.</value>
  </data>
  <data name="Error_MissingAdapterFeature" xml:space="preserve">
    <value>The {0} feature is not implemented by the adapter.</value>
    <comment>{0} - IAdapterFeature name</comment>
  </data>
  <data name="Error_NotAFeatureImplementation" xml:space="preserve">
    <value>Object does not implement feature '{0}'.</value>
    <comment>{0} - feature name</comment>
  </data>
  <data name="Error_NotAnAdapterFeature" xml:space="preserve">
    <value>'{0}' is not a valid adapter feature type. Standard features must be interfaces that extend '{1}' and are annotated with '{2}'. Non-standard features must be interfaces or classes that extend '{3}' and are annotated with '{4}'.</value>
    <comment>{0} - Invalid type name
{1} - IAdapterFeature name
{2} - AnnotationFeatureAttribute name
{3} - IAdapterExtensionFeature name
{4} - AdapterExtensionFeatureAttributeName
</comment>
  </data>
  <data name="Error_RelativeUrisAreNotSupported" xml:space="preserve">
    <value>This operation is not supported for a relative URI.</value>
  </data>
  <data name="Error_UnableToResolveCustomFunction" xml:space="preserve">
    <value>Unable to resolve custom function with ID '{0}'.</value>
    <comment>{0} - function ID</comment>
  </data>
  <data name="Error_UnableToResolveMethod" xml:space="preserve">
    <value>Unable to resolve method '{0}' on type '{1}'.</value>
    <comment>{0} - method name
{1} - type name</comment>
  </data>
  <data name="Error_ValueStopwatch_NotInitialised" xml:space="preserve">
    <value>An uninitialized, or 'default', ValueStopwatch cannot be used to get elapsed time.</value>
  </data>
  <data name="LocalizableString_LocalizationFailed" xml:space="preserve">
    <value>Cannot retrieve property '{0}' because localization failed.  Type '{1}' is not public or does not contain a public static string property with the name '{2}'.</value>
  </data>
  <data name="Log_AdapterIsDisabled" xml:space="preserve">
    <value>Adapter '{AdapterId}' is disabled.</value>
  </data>
  <data name="Log_AdapterStartupError" xml:space="preserve">
    <value>An error occurred while starting adapter '{adapterId}'.</value>
  </data>
  <data name="Log_AdapterStopError" xml:space="preserve">
    <value>An error occurred while stopping adapter '{adapterId}'.</value>
  </data>
  <data name="Log_ErrorWhileDisposingOfFeature" xml:space="preserve">
    <value>Error while disposing of feature '{feature}'.</value>
  </data>
  <data name="Log_StartedAdapter" xml:space="preserve">
    <value>Started adapter '{adapterId}'.</value>
  </data>
  <data name="Log_StartingAdapter" xml:space="preserve">
    <value>Starting adapter '{adapterId}'.</value>
  </data>
  <data name="Log_StoppedAdapter" xml:space="preserve">
    <value>Stopped adapter '{adapterId}'.</value>
  </data>
  <data name="Log_StoppingAdapter" xml:space="preserve">
    <value>Stopping adapter '{adapterId}' (disposing: false).</value>
  </data>
  <data name="Log_UnableToCreateFeatureWrapper" xml:space="preserve">
    <value>Unable to create wrapper for feature type '{feature}'. Automatic validation and telemetry for this feature will not be available.</value>
  </data>
</root>