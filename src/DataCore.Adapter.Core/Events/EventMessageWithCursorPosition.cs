using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;
using System.Text.Json.Serialization;

using DataCore.Adapter.Common;
using DataCore.Adapter.Json;

namespace DataCore.Adapter.Events {

    /// <summary>
    /// Describes a message generated by e.g. an alarms &amp; events system that also contains a cursor position.
    /// </summary>
    [JsonConverter(typeof(EventMessageWithCursorPositionConverter))]
    public sealed class EventMessageWithCursorPosition : EventMessageBase {

        /// <summary>
        /// The cursor position for the event message.
        /// </summary>
        [Required]
        public string CursorPosition { get; }


        /// <summary>
        /// Creates a new <see cref="EventMessageWithCursorPosition"/> object.
        /// </summary>
        /// <param name="id">
        ///   The unique identifier for the event message. If <see langword="null"/>, an 
        ///   identifier will be generated.
        /// </param>
        /// <param name="topic">
        ///   The event message topic e.g. the MQTT channel that emitted the message.
        /// </param>
        /// <param name="utcEventTime">
        ///   The UTC timestamp of the event.
        /// </param>
        /// <param name="priority">
        ///   The event priority.
        /// </param>
        /// <param name="category">
        ///   The event category.
        /// </param>
        /// <param name="message">
        ///   The event message.
        /// </param>
        /// <param name="properties">
        ///   Additional event properties.
        /// </param>
        /// <param name="cursorPosition">
        ///   The cursor position for the event message.
        /// </param>
        /// <exception cref="ArgumentNullException">
        ///   <paramref name="cursorPosition"/> is <see langword="null"/>.
        /// </exception>
        public EventMessageWithCursorPosition(
            string id, 
            string? topic,
            DateTime utcEventTime, 
            EventPriority priority, 
            string? category, 
            string? message, 
            IEnumerable<AdapterProperty>? properties, 
            string cursorPosition
        ) : base(id, topic, utcEventTime, priority, category, message, properties) {
            CursorPosition = cursorPosition ?? throw new ArgumentNullException(nameof(cursorPosition));
        }


        /// <summary>
        /// Creates a new <see cref="EventMessageWithCursorPosition"/> object.
        /// </summary>
        /// <param name="id">
        ///   The unique identifier for the event message.
        /// </param>
        /// <param name="topic">
        ///   The event message topic e.g. the MQTT channel that emitted the message.
        /// </param>
        /// <param name="utcEventTime">
        ///   The UTC timestamp of the event.
        /// </param>
        /// <param name="priority">
        ///   The event priority.
        /// </param>
        /// <param name="category">
        ///   The event category.
        /// </param>
        /// <param name="message">
        ///   The event message.
        /// </param>
        /// <param name="properties">
        ///   Additional event properties.
        /// </param>
        /// <param name="cursorPosition">
        ///   The cursor position for the event message.
        /// </param>
        /// <exception cref="ArgumentNullException">
        ///   <paramref name="cursorPosition"/> is <see langword="null"/>.
        /// </exception>
        public static EventMessageWithCursorPosition Create(string id, string? topic, DateTime utcEventTime, EventPriority priority, string? category, string? message, IEnumerable<AdapterProperty>? properties, string cursorPosition) {
            return new EventMessageWithCursorPosition(id, topic, utcEventTime, priority, category, message, properties, cursorPosition);
        }

    }


    /// <summary>
    /// JSON converter for <see cref="EventMessageWithCursorPosition"/>.
    /// </summary>
    internal class EventMessageWithCursorPositionConverter : AdapterJsonConverter<EventMessageWithCursorPosition> {


        /// <inheritdoc/>
        public override EventMessageWithCursorPosition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
            if (reader.TokenType != JsonTokenType.StartObject) {
                ThrowInvalidJsonError();
            }

            string id = null!;
            string topic = null!;
            DateTime utcEventTime = default;
            EventPriority priority = EventPriority.Unknown;
            string category = null!;
            string message = null!;
            AdapterProperty[] properties = null!;
            string cursorPosition = null!;

            while (reader.Read() && reader.TokenType != JsonTokenType.EndObject) {
                if (reader.TokenType != JsonTokenType.PropertyName) {
                    continue;
                }

                var propertyName = reader.GetString();
                if (!reader.Read()) {
                    ThrowInvalidJsonError();
                }

                if (string.Equals(propertyName, nameof(EventMessageWithCursorPosition.Id), StringComparison.OrdinalIgnoreCase)) {
                    id = JsonSerializer.Deserialize<string>(ref reader, options)!;
                }
                else if (string.Equals(propertyName, nameof(EventMessageWithCursorPosition.Topic), StringComparison.OrdinalIgnoreCase)) {
                    topic = JsonSerializer.Deserialize<string>(ref reader, options)!;
                }
                else if (string.Equals(propertyName, nameof(EventMessageWithCursorPosition.UtcEventTime), StringComparison.OrdinalIgnoreCase)) {
                    utcEventTime = JsonSerializer.Deserialize<DateTime>(ref reader, options);
                }
                else if (string.Equals(propertyName, nameof(EventMessageWithCursorPosition.Priority), StringComparison.OrdinalIgnoreCase)) {
                    priority = JsonSerializer.Deserialize<EventPriority>(ref reader, options);
                }
                else if (string.Equals(propertyName, nameof(EventMessageWithCursorPosition.Category), StringComparison.OrdinalIgnoreCase)) {
                    category = JsonSerializer.Deserialize<string>(ref reader, options)!;
                }
                else if (string.Equals(propertyName, nameof(EventMessageWithCursorPosition.Message), StringComparison.OrdinalIgnoreCase)) {
                    message = JsonSerializer.Deserialize<string>(ref reader, options)!;
                }
                else if (string.Equals(propertyName, nameof(EventMessageWithCursorPosition.Properties), StringComparison.OrdinalIgnoreCase)) {
                    properties = JsonSerializer.Deserialize<AdapterProperty[]>(ref reader, options)!;
                }
                else if (string.Equals(propertyName, nameof(EventMessageWithCursorPosition.CursorPosition), StringComparison.OrdinalIgnoreCase)) {
                    cursorPosition = JsonSerializer.Deserialize<string>(ref reader, options)!;
                }
                else {
                    reader.Skip();
                }
            }

            return EventMessageWithCursorPosition.Create(id, topic, utcEventTime, priority, category, message, properties, cursorPosition);
        }


        /// <inheritdoc/>
        public override void Write(Utf8JsonWriter writer, EventMessageWithCursorPosition value, JsonSerializerOptions options) {
            if (value == null) {
                writer.WriteNullValue();
                return;
            }

            writer.WriteStartObject();
            WritePropertyValue(writer, nameof(EventMessageWithCursorPosition.Id), value.Id, options);
            WritePropertyValue(writer, nameof(EventMessageWithCursorPosition.Topic), value.Topic, options);
            WritePropertyValue(writer, nameof(EventMessageWithCursorPosition.UtcEventTime), value.UtcEventTime, options);
            WritePropertyValue(writer, nameof(EventMessageWithCursorPosition.Priority), value.Priority, options);
            WritePropertyValue(writer, nameof(EventMessageWithCursorPosition.Category), value.Category, options);
            WritePropertyValue(writer, nameof(EventMessageWithCursorPosition.Message), value.Message, options);
            WritePropertyValue(writer, nameof(EventMessageWithCursorPosition.Properties), value.Properties, options);
            WritePropertyValue(writer, nameof(EventMessageWithCursorPosition.CursorPosition), value.CursorPosition, options);
            writer.WriteEndObject();
        }

    }

}
