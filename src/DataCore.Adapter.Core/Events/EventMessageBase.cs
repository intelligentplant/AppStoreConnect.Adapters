using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using DataCore.Adapter.Common;

namespace DataCore.Adapter.Events {

    /// <summary>
    /// Base class describing a message generated by e.g. an alarms &amp; events system.
    /// </summary>
    public abstract class EventMessageBase {

        /// <summary>
        /// A unique identifier for the event.
        /// </summary>
        [Required]
        public string Id { get; }

        /// <summary>
        /// The topic for the event (when the event is emitted by an adapter that supports 
        /// topic-based event messages).
        /// </summary>
        /// <remarks>
        ///   The topic might be set using e.g. the MQTT channel or the OPC UA node that emitted 
        ///   the message
        /// </remarks>
        public string? Topic { get; }

        /// <summary>
        /// The UTC timestamp of the event.
        /// </summary>
        public DateTime UtcEventTime { get; }

        /// <summary>
        /// The priority associated with the event.
        /// </summary>
        public EventPriority Priority { get; }

        /// <summary>
        /// The event category.
        /// </summary>
        public string? Category { get; }

        /// <summary>
        /// The event message.
        /// </summary>
        public string? Message { get; }

        /// <summary>
        /// Additional event properties.
        /// </summary>
        public IEnumerable<AdapterProperty> Properties { get; }


        /// <summary>
        /// Creates a new <see cref="EventMessageBase"/> object.
        /// </summary>
        /// <param name="id">
        ///   The event message ID.
        /// </param>
        /// <param name="topic">
        ///   The event message topic e.g. the MQTT channel that emitted the message.
        /// </param>
        /// <param name="utcEventTime">
        ///   The UTC event time.
        /// </param>
        /// <param name="priority">
        ///   The event priority.
        /// </param>
        /// <param name="category">
        ///   The event category.
        /// </param>
        /// <param name="message">
        ///   The event message.
        /// </param>
        /// <param name="properties">
        ///   The event properties.
        /// </param>
        protected EventMessageBase(string id, string? topic, DateTime utcEventTime, EventPriority priority, string? category, string? message, IEnumerable<AdapterProperty>? properties) {
            Id = id ?? throw new ArgumentNullException(nameof(id));
            Topic = topic;
            UtcEventTime = utcEventTime;
            Priority = priority;
            Category = category;
            Message = message;
            Properties = properties?.ToArray() ?? Array.Empty<AdapterProperty>();
        }

    }

}
