#nullable enable
const DataCore.Adapter.AspNetCore.Controllers.TagValuesController.DefaultSampleOrIntervalCount = 100 -> int
DataCore.Adapter.AspNetCore.Controllers.AdaptersController
DataCore.Adapter.AspNetCore.Controllers.AdaptersController.AdaptersController(DataCore.Adapter.IAdapterAccessor! adapterAccessor) -> void
DataCore.Adapter.AspNetCore.Controllers.AdaptersController.CheckAdapterHealth(string! adapterId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.AdaptersController.FindAdapters(DataCore.Adapter.Common.FindAdaptersRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.AspNetCore.Mvc.IActionResult!
DataCore.Adapter.AspNetCore.Controllers.AdaptersController.FindAdapters(string? id = null, string? name = null, string? description = null, string![]? feature = null, int pageSize = 10, int page = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.AspNetCore.Mvc.IActionResult!
DataCore.Adapter.AspNetCore.Controllers.AdaptersController.GetAdapterById(string! adapterId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.AssetModelBrowserController
DataCore.Adapter.AspNetCore.Controllers.AssetModelBrowserController.AssetModelBrowserController(DataCore.Adapter.IAdapterAccessor! adapterAccessor) -> void
DataCore.Adapter.AspNetCore.Controllers.AssetModelBrowserController.BrowseNodes(string! adapterId, string? start = null, int page = 1, int pageSize = 10, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.AssetModelBrowserController.BrowseNodesPost(string! adapterId, DataCore.Adapter.AssetModel.BrowseAssetModelNodesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.AssetModelBrowserController.FindNodes(string! adapterId, DataCore.Adapter.AssetModel.FindAssetModelNodesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.AssetModelBrowserController.GetNodes(string! adapterId, DataCore.Adapter.AssetModel.GetAssetModelNodesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.CustomFunctionsController
DataCore.Adapter.AspNetCore.Controllers.CustomFunctionsController.CustomFunctionsController(DataCore.Adapter.IAdapterAccessor! adapterAccessor) -> void
DataCore.Adapter.AspNetCore.Controllers.CustomFunctionsController.GetFunctionAsync(string! adapterId, DataCore.Adapter.Extensions.GetCustomFunctionRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.CustomFunctionsController.GetFunctionAsync(string! adapterId, System.Uri! id, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.CustomFunctionsController.GetFunctionsAsync(string! adapterId, DataCore.Adapter.Extensions.GetCustomFunctionsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.CustomFunctionsController.GetFunctionsAsync(string! adapterId, string? id = null, string? name = null, string? description = null, int pageSize = 10, int page = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.CustomFunctionsController.InvokeFunctionAsync(string! adapterId, DataCore.Adapter.Extensions.CustomFunctionInvocationRequest! request, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.JsonOptions!>! jsonOptions, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.EventsController
DataCore.Adapter.AspNetCore.Controllers.EventsController.EventsController(DataCore.Adapter.IAdapterAccessor! adapterAccessor, IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService) -> void
DataCore.Adapter.AspNetCore.Controllers.EventsController.ReadEventMessagesByCursor(string! adapterId, DataCore.Adapter.Events.ReadEventMessagesUsingCursorRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.EventsController.ReadEventMessagesForTimeRange(string! adapterId, DataCore.Adapter.Events.ReadEventMessagesForTimeRangeRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.EventsController.WriteEventMessages(string! adapterId, DataCore.Adapter.Events.WriteEventMessagesRequestExtended! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.ExtensionFeaturesController
DataCore.Adapter.AspNetCore.Controllers.ExtensionFeaturesController.ExtensionFeaturesController(DataCore.Adapter.IAdapterAccessor! adapterAccessor) -> void
DataCore.Adapter.AspNetCore.Controllers.ExtensionFeaturesController.GetAvailableExtensions(string! adapterId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.ExtensionFeaturesController.GetAvailableOperations(string! adapterId, System.Uri! id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.ExtensionFeaturesController.GetDescriptor(string! adapterId, System.Uri! id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.ExtensionFeaturesController.InvokeExtension(string! adapterId, DataCore.Adapter.Extensions.InvocationRequest! request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.HostInfoController
DataCore.Adapter.AspNetCore.Controllers.HostInfoController.GetAvailableApis(DataCore.Adapter.AspNetCore.IAvailableApiService! apiService) -> Microsoft.AspNetCore.Mvc.IActionResult!
DataCore.Adapter.AspNetCore.Controllers.HostInfoController.GetHostInfo() -> Microsoft.AspNetCore.Mvc.IActionResult!
DataCore.Adapter.AspNetCore.Controllers.HostInfoController.GetStandardFeatureDescriptors() -> Microsoft.AspNetCore.Mvc.IActionResult!
DataCore.Adapter.AspNetCore.Controllers.HostInfoController.HostInfoController(DataCore.Adapter.Common.HostInfo! hostInfo) -> void
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.CreateAnnotation(string! adapterId, string! tagId, DataCore.Adapter.RealTimeData.TagValueAnnotation! annotation, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.DeleteAnnotation(string! adapterId, string! tagId, string! annotationId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.ReadAnnotation(string! adapterId, string! tagId, string! annotationId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.ReadAnnotations(string! adapterId, DataCore.Adapter.RealTimeData.ReadAnnotationsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.TagAnnotationsController(DataCore.Adapter.IAdapterAccessor! adapterAccessor) -> void
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.UpdateAnnotation(string! adapterId, string! tagId, string! annotationId, DataCore.Adapter.RealTimeData.TagValueAnnotation! annotation, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.CreateAnnotation(string! adapterId, DataCore.Adapter.RealTimeData.CreateAnnotationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.DeleteAnnotation(string! adapterId, DataCore.Adapter.RealTimeData.DeleteAnnotationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.ReadAnnotation(string! adapterId, DataCore.Adapter.RealTimeData.ReadAnnotationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagAnnotationsController.UpdateAnnotation(string! adapterId, DataCore.Adapter.RealTimeData.UpdateAnnotationRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.CreateTag(string! adapterId, DataCore.Adapter.Tags.CreateTagRequest! request, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.JsonOptions!>! jsonOptions, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.DeleteTag(string! adapterId, DataCore.Adapter.Tags.DeleteTagRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.FindTags(string! adapterId, DataCore.Adapter.Tags.FindTagsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.FindTags(string! adapterId, string? name = null, string? description = null, string? units = null, int pageSize = 10, int page = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.GetTagProperties(string! adapterId, DataCore.Adapter.Tags.GetTagPropertiesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.GetTagProperties(string! adapterId, int pageSize = 10, int page = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.GetTags(string! adapterId, DataCore.Adapter.Tags.GetTagsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.GetTags(string! adapterId, string![]! tag, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.GetTagSchema(string! adapterId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.TagSearchController(DataCore.Adapter.IAdapterAccessor! adapterAccessor) -> void
DataCore.Adapter.AspNetCore.Controllers.TagSearchController.UpdateTag(string! adapterId, DataCore.Adapter.Tags.UpdateTagRequest! request, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.JsonOptions!>! jsonOptions, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.GetSupportedDataFunctions(string! adapterId, DataCore.Adapter.RealTimeData.GetSupportedDataFunctionsRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.GetSupportedDataFunctions(string! adapterId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadPlotValues(string! adapterId, DataCore.Adapter.RealTimeData.ReadPlotTagValuesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadPlotValues(string! adapterId, string![]! tag = null, System.DateTime? start = null, System.DateTime? end = null, int count = 100, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadProcessedValues(string! adapterId, DataCore.Adapter.RealTimeData.ReadProcessedTagValuesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadProcessedValues(string! adapterId, string![]! tag = null, System.DateTime? start = null, System.DateTime? end = null, int count = 100, string![]! function = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadRawValues(string! adapterId, DataCore.Adapter.RealTimeData.ReadRawTagValuesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadRawValues(string! adapterId, string![]! tag = null, System.DateTime? start = null, System.DateTime? end = null, int count = 100, DataCore.Adapter.RealTimeData.RawDataBoundaryType boundary = DataCore.Adapter.RealTimeData.RawDataBoundaryType.Inside, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadSnapshotValues(string! adapterId, DataCore.Adapter.RealTimeData.ReadSnapshotTagValuesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadSnapshotValues(string! adapterId, string![]! tag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadValuesAtTimes(string! adapterId, DataCore.Adapter.RealTimeData.ReadTagValuesAtTimesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.ReadValuesAtTimes(string! adapterId, string![]! tag = null, System.DateTime[]! time = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.TagValuesController(DataCore.Adapter.IAdapterAccessor! adapterAccessor, IntelligentPlant.BackgroundTasks.IBackgroundTaskService! backgroundTaskService) -> void
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.WriteHistoricalValues(string! adapterId, DataCore.Adapter.RealTimeData.WriteTagValuesRequestExtended! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
DataCore.Adapter.AspNetCore.Controllers.TagValuesController.WriteSnapshotValues(string! adapterId, DataCore.Adapter.RealTimeData.WriteTagValuesRequestExtended! request, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!
Microsoft.AspNetCore.Routing.AdapterMvcEndpointDataSourceExtensions
Microsoft.Extensions.DependencyInjection.MvcConfigurationExtensions
static DataCore.Adapter.AspNetCore.Controllers.TagValuesController.DefaultHistoricalQueryDuration.get -> System.TimeSpan
static Microsoft.AspNetCore.Routing.AdapterMvcEndpointDataSourceExtensions.IsMvcAdapterApiRegistered(this Microsoft.AspNetCore.Routing.EndpointDataSource! endpointDataSource) -> bool
static Microsoft.Extensions.DependencyInjection.MvcConfigurationExtensions.AddDataCoreAdapterMvc(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
