{
  "x-generator": "NSwag v13.10.2.0 (NJsonSchema v10.3.4.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "App Store Connect Adapters",
    "description": "HTTP API for querying an App Store Connect adapters host.",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:48189"
    }
  ],
  "paths": {
    "/api/app-store-connect/v2.0/adapters": {
      "get": {
        "tags": [
          "Adapters"
        ],
        "summary": "Finds adapters matching the specified search filters.",
        "operationId": "Adapters_FindAdaptersAll",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The adapter ID filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "name",
            "in": "query",
            "description": "The adapter name filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "description",
            "in": "query",
            "description": "The adapter description filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "feature",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The adapter feature filter. Unlike the ID, name and description filters, the feature filter must exactly match the standard or extension feature name.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 4
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size for the query.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 5
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for the query.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of AdapterDescriptor objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdapterDescriptor"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Adapters"
        ],
        "summary": "Finds adapters matching the specified search filter.",
        "operationId": "Adapters_FindAdapters",
        "requestBody": {
          "x-name": "request",
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindAdaptersRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of AdapterDescriptor objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdapterDescriptor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/adapters/{adapterId}": {
      "get": {
        "tags": [
          "Adapters"
        ],
        "summary": "Gets information about the specified adapter.",
        "operationId": "Adapters_GetAdapterById",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the AdapterDescriptorExtended for the requested adapter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdapterDescriptorExtended"
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/adapters/{adapterId}/health-status": {
      "get": {
        "tags": [
          "Adapters"
        ],
        "summary": "Performs a health check on the specified adapter.",
        "operationId": "Adapters_CheckAdapterHealth",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the HealthCheckResult for the requested adapter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/asset-model/{adapterId}/browse": {
      "get": {
        "tags": [
          "AssetModelBrowser"
        ],
        "summary": "Browses the asset model hierarchy. Up to MaxNodesPerQuery will be returned.",
        "operationId": "AssetModelBrowser_BrowseNodes",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "start",
            "in": "query",
            "description": "The optional starting node ID. If no value is specified, browsing will start at the top-level nodes in the hierarchy.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "page",
            "in": "query",
            "description": "The results page to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 3
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size for the query.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the matching AssetModelNode objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetModelNode"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AssetModelBrowser"
        ],
        "summary": "Browses the asset model hierarchy. Up to MaxNodesPerQuery will be returned.",
        "operationId": "AssetModelBrowser_BrowseNodesPost",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The browse request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowseAssetModelNodesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain the matching AssetModelNode objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetModelNode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/asset-model/{adapterId}/get-by-id": {
      "post": {
        "tags": [
          "AssetModelBrowser"
        ],
        "summary": "Gets a collection of nodes by ID. Up to MaxNodesPerQuery will be returned.",
        "operationId": "AssetModelBrowser_GetNodes",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object describing the nodes to retrieve.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAssetModelNodesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain the matching AssetModelNode objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetModelNode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/asset-model/{adapterId}/find": {
      "post": {
        "tags": [
          "AssetModelBrowser"
        ],
        "summary": "Finds nodes matching the specified search filter. Up to MaxNodesPerQuery will be returned.",
        "operationId": "AssetModelBrowser_FindNodes",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object describing the nodes to retrieve.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindAssetModelNodesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain the matching AssetModelNode objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetModelNode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/events/{adapterId}/by-time-range": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Reads historical event messages for the specified time range.",
        "operationId": "Events_ReadEventMessagesForTimeRange",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadEventMessagesForTimeRangeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of EventMessage objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/events/{adapterId}/by-cursor": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Reads historical event messages starting at the specified cursor position.",
        "operationId": "Events_ReadEventMessagesByCursor",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadEventMessagesUsingCursorRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of EventMessageWithCursorPosition objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventMessageWithCursorPosition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/events/{adapterId}/write": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Writes event messages to an adapter. Up to MaxEventMessagesPerWriteRequest messages can be written in a single request.",
        "description": "Up to MaxEventMessagesPerWriteRequest values can be written to the adapter in a single request. Subsequent values will be ignored. No corresponding WriteEventMessageResult object will be returned for these items.",
        "operationId": "Events_WriteEventMessages",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID to write to.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The event messages to write.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WriteEventMessagesRequestExtended"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of WriteEventMessageResult objects (one per sample written).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WriteEventMessageResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/extensions/{adapterId}": {
      "get": {
        "tags": [
          "ExtensionFeatures"
        ],
        "summary": "Gets the extension feature URIs for an adapter.",
        "operationId": "ExtensionFeatures_GetAvailableExtensions",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of adapter extension feature URIs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/extensions/{adapterId}/descriptor": {
      "get": {
        "tags": [
          "ExtensionFeatures"
        ],
        "summary": "Gets the descriptor for the specified extension feature.",
        "operationId": "ExtensionFeatures_GetDescriptor",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "description": "The extension feature URI.",
            "schema": {
              "type": "string",
              "format": "uri",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a FeatureDescriptor object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/extensions/{adapterId}/operations": {
      "get": {
        "tags": [
          "ExtensionFeatures"
        ],
        "summary": "Gets the available operations on an extension feature.",
        "operationId": "ExtensionFeatures_GetAvailableOperations",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "description": "The extension feature URI.",
            "schema": {
              "type": "string",
              "format": "uri",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of ExtensionFeatureOperationDescriptor objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtensionFeatureOperationDescriptor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/extensions/{adapterId}/operations/invoke": {
      "post": {
        "tags": [
          "ExtensionFeatures"
        ],
        "summary": "Invokes an extension adapter feature.",
        "operationId": "ExtensionFeatures_InvokeExtension",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The invocation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvocationRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain an InvocationResponse describing the operation result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvocationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/host-info": {
      "get": {
        "tags": [
          "HostInfo"
        ],
        "summary": "Gets information about the hosting application.",
        "operationId": "HostInfo_GetHostInfo",
        "responses": {
          "200": {
            "description": "Successful responses contain a HostInfo object describing the hosting application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/host-info/adapter-features": {
      "get": {
        "tags": [
          "HostInfo"
        ],
        "summary": "Gets descriptors for the standard adapter features.",
        "operationId": "HostInfo_GetStandardFeatureDescriptors",
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of FeatureDescriptor object describing the standard adapter features.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeatureDescriptor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-annotations/{adapterId}": {
      "post": {
        "tags": [
          "TagAnnotations"
        ],
        "summary": "Reads tag value annotations from an adapter.",
        "operationId": "TagAnnotations_ReadAnnotations",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The query.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadAnnotationsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of TagValueAnnotationQueryResult objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueAnnotationQueryResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-annotations/{adapterId}/{tagId}/{annotationId}": {
      "get": {
        "tags": [
          "TagAnnotations"
        ],
        "summary": "Gets an annotation by ID.",
        "operationId": "TagAnnotations_ReadAnnotation",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "description": "The tag ID for the annotation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "annotationId",
            "in": "path",
            "required": true,
            "description": "The ID for the annotation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the matching TagValueAnnotationExtended object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagValueAnnotationExtended"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TagAnnotations"
        ],
        "summary": "Deletes an annotation on a tag.",
        "operationId": "TagAnnotations_UpdateAnnotation",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "description": "The tag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "annotationId",
            "in": "path",
            "required": true,
            "description": "The annotation ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "annotation",
          "description": "The annotation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagValueAnnotation"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a WriteTagValueAnnotationResult describing the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteTagValueAnnotationResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TagAnnotations"
        ],
        "summary": "Deletes an annotation on a tag.",
        "operationId": "TagAnnotations_DeleteAnnotation",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "description": "The tag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "annotationId",
            "in": "path",
            "required": true,
            "description": "The annotation ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a WriteTagValueAnnotationResult describing the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteTagValueAnnotationResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-annotations/{adapterId}/{tagId}/create": {
      "post": {
        "tags": [
          "TagAnnotations"
        ],
        "summary": "Creates an annotation on a tag.",
        "operationId": "TagAnnotations_CreateAnnotation",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "description": "The tag ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "annotation",
          "description": "The annotation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagValueAnnotation"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a WriteTagValueAnnotationResult describing the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteTagValueAnnotationResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tags/{adapterId}/properties": {
      "post": {
        "tags": [
          "TagSearch"
        ],
        "summary": "Gets tag property definitions from an adapter.",
        "operationId": "TagSearch_GetTagPropertiesAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTagPropertiesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of AdapterProperty objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdapterProperty"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TagSearch"
        ],
        "summary": "Gets tag property definitions from an adapter.",
        "operationId": "TagSearch_GetTagProperties",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 2
          },
          {
            "name": "page",
            "in": "query",
            "description": "The results page to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of AdapterProperty objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDefinition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tags/{adapterId}/find": {
      "post": {
        "tags": [
          "TagSearch"
        ],
        "summary": "Performs a tag search on an adapter.",
        "operationId": "TagSearch_FindTagsAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindTagsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of TagDefinition objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDefinition"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TagSearch"
        ],
        "summary": "Performs a tag search on an adapter.",
        "operationId": "TagSearch_FindTags",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "name",
            "in": "query",
            "description": "The tag name filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "description",
            "in": "query",
            "description": "The tag description filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "units",
            "in": "query",
            "description": "The tag units filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 5
          },
          {
            "name": "page",
            "in": "query",
            "description": "The results page to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of TagDefinition objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDefinition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tags/{adapterId}": {
      "post": {
        "tags": [
          "TagSearch"
        ],
        "summary": "Performs a tag search on an adapter.",
        "operationId": "TagSearch_FindTags2",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The search filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindTagsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of TagDefinition objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDefinition"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TagSearch"
        ],
        "summary": "Performs a tag search on an adapter.",
        "operationId": "TagSearch_FindTags3",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "name",
            "in": "query",
            "description": "The tag name filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "description",
            "in": "query",
            "description": "The tag description filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "units",
            "in": "query",
            "description": "The tag units filter.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 5
          },
          {
            "name": "page",
            "in": "query",
            "description": "The results page to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of TagDefinition objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDefinition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tags/{adapterId}/get-by-id": {
      "post": {
        "tags": [
          "TagSearch"
        ],
        "summary": "Gets tags by ID.",
        "operationId": "TagSearch_GetTagsAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTagsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of matching TagDefinition objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDefinition"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TagSearch"
        ],
        "summary": "Gets tags by ID.",
        "operationId": "TagSearch_GetTags",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The adapter ID.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The IDs of the tags to retrieve.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of matching TagDefinition objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDefinition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-values/{adapterId}/snapshot": {
      "get": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests snapshot (current) tag values.",
        "operationId": "TagValues_ReadSnapshotValuesAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The tag IDs or names to poll.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the snapshot values for the requested tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests snapshot (current) tag values.",
        "operationId": "TagValues_ReadSnapshotValues",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The snapshot data request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadSnapshotTagValuesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain the snapshot values for the requested tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-values/{adapterId}/raw": {
      "get": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests raw (archived) tag values.",
        "operationId": "TagValues_ReadRawValuesAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The tag IDs or names to poll.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "start",
            "in": "query",
            "description": "The UTC start time for the query.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "end",
            "in": "query",
            "description": "The UTC end time for the query.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "The maximum number of samples to retrieve per tag.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          },
          {
            "name": "boundary",
            "in": "query",
            "description": "The boundary type for the query.",
            "schema": {
              "default": "Inside",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RawDataBoundaryType"
                }
              ]
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the raw values for the requested tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests raw (archived) tag values.",
        "operationId": "TagValues_ReadRawValues",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The raw data request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadRawTagValuesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain the raw values for the requested tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-values/{adapterId}/plot": {
      "get": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests plot (vizualization-friendly) tag values.",
        "description": "Plot data is intended to provide visualization-friendly data sets for display in e.g. charts.",
        "operationId": "TagValues_ReadPlotValuesAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The tag IDs or names to poll.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "start",
            "in": "query",
            "description": "The UTC start time for the query.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "end",
            "in": "query",
            "description": "The UTC end time for the query.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "The number of intervals for the query (typically the pixel width of the chart that the data will be displayed on).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the plot values for the requested tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests plot (vizualization-friendly) tag values.",
        "description": "Plot data is intended to provide visualization-friendly data sets for display in e.g. charts.",
        "operationId": "TagValues_ReadPlotValues",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The plot data request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadPlotTagValuesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain the plot values for the requested tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-values/{adapterId}/values-at-times": {
      "get": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests tag values at specific timestamps.",
        "operationId": "TagValues_ReadValuesAtTimesAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The tag IDs or names to poll.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "time",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The UTC sample times to request values at.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the values for the requested tags at the requested times.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests tag values at specific timestamps.",
        "operationId": "TagValues_ReadValuesAtTimes",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The values-at-times data request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadTagValuesAtTimesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain the values for the requested tags at the requested times.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-values/{adapterId}/processed": {
      "get": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests processed (aggregated) tag values.",
        "description": "Processed data queries are used to request aggregated values for tags. The functions supported vary by data source. The DefaultDataFunctions class definesconstants for commonly-supported aggregate functions.",
        "operationId": "TagValues_ReadProcessedValuesAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "tag",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The tag IDs or names to poll.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "start",
            "in": "query",
            "description": "The UTC start time for the query.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "end",
            "in": "query",
            "description": "The UTC end time for the query.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "The number of samples to request per tag. The sample interval for the query will be derived from this value.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          },
          {
            "name": "function",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The data function IDs for the query.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain the aggregated values for the requested tags and data functions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessedTagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests processed (aggregated) tag values.",
        "description": "Processed data queries are used to request aggregated values for tags. The functions supported vary by data source. The DefaultDataFunctions class definesconstants for commonly-supported aggregate functions.",
        "operationId": "TagValues_ReadProcessedValues",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The processed data request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadProcessedTagValuesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain the aggregated values for the requested tags and data functions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessedTagValueQueryResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-values/{adapterId}/supported-aggregations": {
      "get": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests the aggregate functions that can be specified when requesting processed data.",
        "description": "Processed data queries are used to request aggregated values for tags. The functions supported vary by data source. The DefaultDataFunctions class definesconstants for commonly-supported aggregate functions.",
        "operationId": "TagValues_GetSupportedDataFunctionsAll",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful responses contain descriptors for the aggregated function names that can be specified.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataFunctionDescriptor"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TagValues"
        ],
        "summary": "Requests the aggregate functions that can be specified when requesting processed data.",
        "description": "Processed data queries are used to request aggregated values for tags. The functions supported vary by data source. The DefaultDataFunctions class definesconstants for commonly-supported aggregate functions.",
        "operationId": "TagValues_GetSupportedDataFunctions",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to query.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSupportedDataFunctionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain descriptors for the aggregated function names that can be specified.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataFunctionDescriptor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-values/{adapterId}/write/snapshot": {
      "post": {
        "tags": [
          "TagValues"
        ],
        "summary": "Writes values to an adapter's snapshot. Up to MaxSamplesPerWriteRequest values can be written in a single request.",
        "description": "Up to MaxSamplesPerWriteRequest values can be written to the adapter in a single request. Subsequent values will be ignored. No corresponding WriteTagValueResult object will be returned for these items.",
        "operationId": "TagValues_WriteSnapshotValues",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to write to.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The values to write.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WriteTagValuesRequestExtended"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of WriteTagValueResult objects (one per sample written).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WriteTagValueResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/app-store-connect/v2.0/tag-values/{adapterId}/write/history": {
      "post": {
        "tags": [
          "TagValues"
        ],
        "summary": "Writes values to an adapter's historical archive. Up to MaxSamplesPerWriteRequestvalues can be written in a single request.",
        "description": "Up to MaxSamplesPerWriteRequest values can be written to the adapter in a single request. Subsequent values will be ignored. No corresponding WriteTagValueResult object will be returned for these items.",
        "operationId": "TagValues_WriteHistoricalValues",
        "parameters": [
          {
            "name": "adapterId",
            "in": "path",
            "required": true,
            "description": "The ID of the adapter to write to.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The values to write.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WriteTagValuesRequestExtended"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Successful responses contain a collection of WriteTagValueResult objects (one per sample written).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WriteTagValueResult"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdapterDescriptor": {
        "type": "object",
        "description": "A descriptor for an App Store Connect adapter.",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the adapter. This can be any type of value, as long as it is unique \nwithin the hosting application, and does not change.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The adapter name.",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "The adapter description.",
            "nullable": true
          }
        }
      },
      "FindAdaptersRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageableAdapterRequest"
          },
          {
            "type": "object",
            "description": "A request to retrieve a filtered list of adapters.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "The adapter ID filter. Partial matches can be specified.",
                "nullable": true
              },
              "name": {
                "type": "string",
                "description": "The adapter name filter.",
                "nullable": true
              },
              "description": {
                "type": "string",
                "description": "The adapter description filter.",
                "nullable": true
              },
              "features": {
                "type": "array",
                "description": "The adapter feature filters.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "PageableAdapterRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "Base class for adapter requests that support paging.",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "pageSize": {
                "type": "integer",
                "description": "The page size for the query.",
                "format": "int32",
                "default": 10,
                "maximum": 2147483647.0,
                "minimum": 1.0
              },
              "page": {
                "type": "integer",
                "description": "The page number for the query.",
                "format": "int32",
                "default": 1,
                "maximum": 2147483647.0,
                "minimum": 1.0
              }
            }
          }
        ]
      },
      "AdapterRequest": {
        "type": "object",
        "description": "Base class that adapter request objects can inherit from.",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "properties": {
            "type": "object",
            "description": "Additional request properties. These can be used to provide bespoke query parameters \nsupported by the adapter.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AdapterDescriptorExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterDescriptor"
          },
          {
            "type": "object",
            "description": "An extended descriptor for an adapter, that includes information about the features that the \nadapter has implemented.",
            "additionalProperties": false,
            "properties": {
              "typeDescriptor": {
                "description": "The adapter type descriptor.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AdapterTypeDescriptor"
                  }
                ]
              },
              "features": {
                "type": "array",
                "description": "The names of the implemented standard adapter features.",
                "items": {
                  "type": "string"
                }
              },
              "extensions": {
                "type": "array",
                "description": "The names of the implemented extension adapter features.",
                "items": {
                  "type": "string"
                }
              },
              "properties": {
                "type": "array",
                "description": "Additional adapter properties.",
                "items": {
                  "$ref": "#/components/schemas/AdapterProperty"
                }
              }
            }
          }
        ]
      },
      "AdapterTypeDescriptor": {
        "type": "object",
        "description": "Describes an adapter type.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The URI for the adapter type.",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "The display name for the adapter type.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description for the adapter type.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The adapter type version number, expressed as a Semantic Versioning v2 version.",
            "nullable": true
          },
          "vendor": {
            "description": "The vendor information for the adapter type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/VendorInfo"
              }
            ]
          }
        }
      },
      "VendorInfo": {
        "type": "object",
        "description": "Describes the vendor for the hosting application.",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The vendor name.",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "The vendor URL.",
            "nullable": true
          }
        }
      },
      "AdapterProperty": {
        "type": "object",
        "description": "Describes a custom property associated with an adapter, tag, tag value, event message, etc.",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The property name.",
            "minLength": 1
          },
          "value": {
            "description": "The property value.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Variant"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "The property description.",
            "nullable": true
          }
        }
      },
      "Variant": {
        "type": "object",
        "description": "Describes a variant value.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "description": "The value.",
            "nullable": true
          },
          "type": {
            "description": "The variant type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/VariantType"
              }
            ]
          },
          "arrayDimensions": {
            "type": "array",
            "description": "If Value is an array, ArrayDimensions defines the \ndimensions of the array. For all other values, this property will be \nnull.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "VariantType": {
        "type": "string",
        "description": "Describes the type of a variant value.",
        "x-enumNames": [
          "Unknown",
          "Null",
          "ExtensionObject",
          "Boolean",
          "SByte",
          "Byte",
          "Int16",
          "UInt16",
          "Int32",
          "UInt32",
          "Int64",
          "UInt64",
          "Float",
          "Double",
          "String",
          "DateTime",
          "TimeSpan",
          "Url"
        ],
        "enum": [
          "Unknown",
          "Null",
          "ExtensionObject",
          "Boolean",
          "SByte",
          "Byte",
          "Int16",
          "UInt16",
          "Int32",
          "UInt32",
          "Int64",
          "UInt64",
          "Float",
          "Double",
          "String",
          "DateTime",
          "TimeSpan",
          "Url"
        ]
      },
      "HealthCheckResult": {
        "type": "object",
        "description": "Represents the result of an adapter health check.",
        "additionalProperties": false,
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the health check result."
          },
          "status": {
            "description": "The status of the health check result.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/HealthStatus"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the health check that was performed.",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "The error that occurred when checking the status (if any).",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Additional data associated with the health check.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "innerResults": {
            "type": "array",
            "description": "The inner results that contributed to the status of this result.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/HealthCheckResult"
            }
          }
        }
      },
      "HealthStatus": {
        "type": "string",
        "description": "Represents the reported status of a health check result.",
        "x-enumNames": [
          "Unhealthy",
          "Degraded",
          "Healthy"
        ],
        "enum": [
          "Unhealthy",
          "Degraded",
          "Healthy"
        ]
      },
      "AssetModelNode": {
        "type": "object",
        "description": "Describes a node in an adapter's asset model.",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the node.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The node name.",
            "minLength": 1
          },
          "nodeType": {
            "description": "The type of the node.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NodeType"
              }
            ]
          },
          "nodeSubType": {
            "type": "string",
            "description": "The subtype of the node. This is a text value supplied by the adapter, intended to \nprovide more information about the node type (e.g. if the node represents a conceptual \nitem such as a folder in a hierarchical structure).",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The node description.",
            "nullable": true
          },
          "parent": {
            "type": "string",
            "description": "The parent ID of the node. Top-level nodes will have a value of null.",
            "nullable": true
          },
          "hasChildren": {
            "type": "boolean",
            "description": "Indicates if this node has any child nodes."
          },
          "dataReference": {
            "description": "The data reference associated with the node.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataReference"
              }
            ]
          },
          "properties": {
            "type": "array",
            "description": "Additional properties associated with the node.",
            "items": {
              "$ref": "#/components/schemas/AdapterProperty"
            }
          }
        }
      },
      "NodeType": {
        "type": "string",
        "description": "Describes the type of a node in an asset model.",
        "x-enumNames": [
          "Unknown",
          "Object",
          "Variable",
          "ObjectType",
          "VariableType",
          "Other"
        ],
        "enum": [
          "Unknown",
          "Object",
          "Variable",
          "ObjectType",
          "VariableType",
          "Other"
        ]
      },
      "DataReference": {
        "type": "object",
        "description": "Describes a data reference on an AssetModelNode. Note that the reference can \nbe to a tag on a different adapter.",
        "additionalProperties": false,
        "properties": {
          "adapterId": {
            "type": "string",
            "description": "The adapter ID for the reference."
          },
          "tag": {
            "type": "string",
            "description": "The tag name or ID for the reference."
          }
        }
      },
      "BrowseAssetModelNodesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageableAdapterRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to browse nodes in an adapter's asset model.",
            "additionalProperties": false,
            "properties": {
              "parentId": {
                "type": "string",
                "description": "The ID of the parent node to start at. Specify null to request top-level \nnodes.",
                "nullable": true
              }
            }
          }
        ]
      },
      "GetAssetModelNodesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to get asset model nodes by ID.",
            "additionalProperties": false,
            "required": [
              "nodes"
            ],
            "properties": {
              "nodes": {
                "type": "array",
                "description": "The IDs of the nodes to retrieve.",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "FindAssetModelNodesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageableAdapterRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to search for asset model nodes.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "The name filter.",
                "nullable": true
              },
              "description": {
                "type": "string",
                "description": "The description filter.",
                "nullable": true
              }
            }
          }
        ]
      },
      "EventMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventMessageBase"
          },
          {
            "type": "object",
            "description": "Describes a message generated by e.g. an alarms &amp; events system.",
            "additionalProperties": false
          }
        ]
      },
      "EventMessageBase": {
        "type": "object",
        "description": "Base class describing a message generated by e.g. an alarms &amp; events system.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the event.",
            "minLength": 1
          },
          "topic": {
            "type": "string",
            "description": "The topic for the event (when the event is emitted by an adapter that supports \ntopic-based event messages).",
            "nullable": true
          },
          "utcEventTime": {
            "type": "string",
            "description": "The UTC timestamp of the event.",
            "format": "date-time"
          },
          "priority": {
            "description": "The priority associated with the event.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EventPriority"
              }
            ]
          },
          "category": {
            "type": "string",
            "description": "The event category.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The event message.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "description": "Additional event properties.",
            "items": {
              "$ref": "#/components/schemas/AdapterProperty"
            }
          }
        }
      },
      "EventPriority": {
        "type": "string",
        "description": "Describes the priority associated with an event message.",
        "x-enumNames": [
          "Unknown",
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "enum": [
          "Unknown",
          "Low",
          "Medium",
          "High",
          "Critical"
        ]
      },
      "ReadEventMessagesForTimeRangeRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadHistoricalEventMessagesRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to retrieve historical event messages using a time range.",
            "additionalProperties": false,
            "required": [
              "utcStartTime",
              "utcEndTime"
            ],
            "properties": {
              "topics": {
                "type": "array",
                "description": "The topics to read messages for. This property will be ignored if the adapter does not \nsupport a topic-based event model.",
                "maxItems": 100,
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "utcStartTime": {
                "type": "string",
                "description": "The UTC start time for the request.",
                "format": "date-time",
                "minLength": 1
              },
              "utcEndTime": {
                "type": "string",
                "description": "The UTC end time for the request.",
                "format": "date-time",
                "minLength": 1
              },
              "pageSize": {
                "type": "integer",
                "description": "The page size for the query.",
                "format": "int32",
                "default": 10,
                "maximum": 2147483647.0,
                "minimum": 1.0
              },
              "page": {
                "type": "integer",
                "description": "The page number for the query.",
                "format": "int32",
                "default": 1,
                "maximum": 2147483647.0,
                "minimum": 1.0
              }
            }
          }
        ]
      },
      "ReadHistoricalEventMessagesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "Base class for adapter requests related to reading historical event messages.",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "direction": {
                "description": "The event read direction. When Backwards is specified, \nthe resulting events will be returned in descending order of time.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EventReadDirection"
                  }
                ]
              }
            }
          }
        ]
      },
      "EventReadDirection": {
        "type": "string",
        "description": "Describes the read direction for a historical event message read operation.",
        "x-enumNames": [
          "Forwards",
          "Backwards"
        ],
        "enum": [
          "Forwards",
          "Backwards"
        ]
      },
      "EventMessageWithCursorPosition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventMessageBase"
          },
          {
            "type": "object",
            "description": "Describes a message generated by e.g. an alarms &amp; events system that also contains a cursor position.",
            "additionalProperties": false,
            "required": [
              "cursorPosition"
            ],
            "properties": {
              "cursorPosition": {
                "type": "string",
                "description": "The cursor position for the event message.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ReadEventMessagesUsingCursorRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadHistoricalEventMessagesRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to retrieve historical event messages using a cursor to specify the query start position.",
            "additionalProperties": false,
            "properties": {
              "topic": {
                "type": "string",
                "description": "The topic to read messages for. This property will be ignored if the adapter does not \nsupport a topic-based event model.",
                "nullable": true
              },
              "cursorPosition": {
                "type": "string",
                "description": "The cursor position to start the query at.",
                "nullable": true
              },
              "pageSize": {
                "type": "integer",
                "description": "The page size for the query.",
                "format": "int32",
                "default": 10,
                "maximum": 2147483647.0,
                "minimum": 1.0
              }
            }
          }
        ]
      },
      "WriteEventMessageResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WriteOperationResult"
          },
          {
            "type": "object",
            "description": "Describes the result of an event message write operation.",
            "additionalProperties": false,
            "properties": {
              "correlationId": {
                "type": "string",
                "description": "The optional correlation ID for the operation.",
                "nullable": true
              }
            }
          }
        ]
      },
      "WriteOperationResult": {
        "type": "object",
        "description": "Base class for result objects returned from write operations.",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "status": {
            "description": "Indicates if the write was successful.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/WriteStatus"
              }
            ]
          },
          "notes": {
            "type": "string",
            "description": "Notes associated with the write.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "description": "Additional properties related to the write.",
            "items": {
              "$ref": "#/components/schemas/AdapterProperty"
            }
          }
        }
      },
      "WriteStatus": {
        "type": "string",
        "description": "Describes the status of a write operation.",
        "x-enumNames": [
          "Unknown",
          "Success",
          "Fail",
          "Pending"
        ],
        "enum": [
          "Unknown",
          "Success",
          "Fail",
          "Pending"
        ]
      },
      "WriteEventMessagesRequestExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WriteEventMessagesRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to write event messages to an adapter.",
            "additionalProperties": false,
            "required": [
              "events"
            ],
            "properties": {
              "events": {
                "type": "array",
                "description": "The event messages to write.",
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/WriteEventMessageItem"
                }
              }
            }
          }
        ]
      },
      "WriteEventMessageItem": {
        "type": "object",
        "description": "Describes an event message being written to an adapter.",
        "additionalProperties": false,
        "required": [
          "eventMessage"
        ],
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "The optional correlation ID for the operation.",
            "nullable": true
          },
          "eventMessage": {
            "description": "The event message to write.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EventMessage"
              }
            ]
          }
        }
      },
      "WriteEventMessagesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "A request to write event messages to an adapter.",
            "additionalProperties": false
          }
        ]
      },
      "FeatureDescriptor": {
        "type": "object",
        "description": "Describes an adapter feature.",
        "additionalProperties": false,
        "required": [
          "uri",
          "displayName"
        ],
        "properties": {
          "uri": {
            "type": "string",
            "description": "The extension feature URI.",
            "format": "uri",
            "minLength": 1
          },
          "displayName": {
            "type": "string",
            "description": "The feature display name.",
            "maxLength": 100,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "The feature description.",
            "maxLength": 500,
            "nullable": true
          }
        }
      },
      "ExtensionFeatureOperationDescriptor": {
        "type": "object",
        "description": "Describes an operation on an extension adapter feature.",
        "additionalProperties": false,
        "properties": {
          "operationId": {
            "type": "string",
            "description": "The operation URI.",
            "format": "uri"
          },
          "operationType": {
            "description": "The operation type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExtensionFeatureOperationType"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "The name for the operation."
          },
          "description": {
            "type": "string",
            "description": "The description.",
            "nullable": true
          },
          "requestSchema": {
            "description": "The JSON schema for the operation's request object.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/JsonElement"
              }
            ]
          },
          "responseSchema": {
            "description": "The JSON schema for the operation's response object.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/JsonElement"
              }
            ]
          }
        }
      },
      "ExtensionFeatureOperationType": {
        "type": "string",
        "description": "Describes the operation type for an extension adapter feature operation.",
        "x-enumNames": [
          "Invoke",
          "Stream",
          "DuplexStream"
        ],
        "enum": [
          "Invoke",
          "Stream",
          "DuplexStream"
        ]
      },
      "JsonElement": {},
      "InvocationResponse": {
        "type": "object",
        "description": "Describes a response to an InvocationRequest.",
        "additionalProperties": false,
        "properties": {
          "results": {
            "description": "The invocation results.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/JsonElement"
              }
            ]
          }
        }
      },
      "InvocationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "A request to invoke an extension operation on an adapter of type Invoke \nor Stream. ",
            "additionalProperties": false,
            "required": [
              "operationId"
            ],
            "properties": {
              "operationId": {
                "type": "string",
                "description": "The ID of the operation.",
                "format": "uri",
                "minLength": 1
              },
              "arguments": {
                "description": "The invocation arguments.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/JsonElement"
                  }
                ]
              }
            }
          }
        ]
      },
      "HostInfo": {
        "type": "object",
        "description": "Describes the hosting application.",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The application name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The application description.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The Semantic Versioning v2 (https://semver.org/spec/v2.0.0.html) application version."
          },
          "vendor": {
            "description": "Information about the application vendor.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/VendorInfo"
              }
            ]
          },
          "properties": {
            "type": "array",
            "description": "Custom properties supplied by the hosting application.",
            "items": {
              "$ref": "#/components/schemas/AdapterProperty"
            }
          }
        }
      },
      "TagValueAnnotationQueryResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagDataContainer"
          },
          {
            "type": "object",
            "description": "Describes a result for an annotations query on a tag.",
            "additionalProperties": false,
            "required": [
              "annotation"
            ],
            "properties": {
              "annotation": {
                "description": "The annotation.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TagValueAnnotationExtended"
                  }
                ]
              }
            }
          }
        ]
      },
      "TagValueAnnotationExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagValueAnnotation"
          },
          {
            "type": "object",
            "description": "Describes an annotation on a tag.",
            "additionalProperties": false,
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier for the annotation.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "TagValueAnnotation": {
        "type": "object",
        "description": "Describes the base set of properties for a tag value annotation.",
        "additionalProperties": false,
        "properties": {
          "annotationType": {
            "description": "The annotation type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnnotationType"
              }
            ]
          },
          "utcStartTime": {
            "type": "string",
            "description": "The UTC start time for the annotation.",
            "format": "date-time"
          },
          "utcEndTime": {
            "type": "string",
            "description": "The UTC end time for the annotation. If AnnotationType is \nInstantaneous, this property will always be \nnull.",
            "format": "date-time",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The annotation value.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "An additional description or explanation of the annotation.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "description": "Additional annotation properties.",
            "items": {
              "$ref": "#/components/schemas/AdapterProperty"
            }
          }
        }
      },
      "AnnotationType": {
        "type": "string",
        "description": "Specifies the type of an annotation.",
        "x-enumNames": [
          "Unknown",
          "Instantaneous",
          "TimeRange"
        ],
        "enum": [
          "Unknown",
          "Instantaneous",
          "TimeRange"
        ]
      },
      "TagDataContainer": {
        "type": "object",
        "description": "Describes a base class for data associated with a tag.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "tagId",
          "tagName"
        ],
        "properties": {
          "tagId": {
            "type": "string",
            "description": "The tag ID.",
            "minLength": 1
          },
          "tagName": {
            "type": "string",
            "description": "The tag name.",
            "minLength": 1
          }
        }
      },
      "ReadAnnotationsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadHistoricalTagValuesRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to read annotations on tag values.",
            "additionalProperties": false,
            "required": [
              "annotationCount"
            ],
            "properties": {
              "annotationCount": {
                "type": "integer",
                "description": "The maximum number of annotations to retrieve per tag.",
                "format": "int32",
                "default": 50
              }
            }
          }
        ]
      },
      "ReadHistoricalTagValuesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadTagDataRequest"
          },
          {
            "type": "object",
            "description": "Describes a generic request to retrieve historical data from a set of tags.",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "utcStartTime",
              "utcEndTime"
            ],
            "properties": {
              "utcStartTime": {
                "type": "string",
                "description": "The UTC start time for the request.",
                "format": "date-time",
                "minLength": 1
              },
              "utcEndTime": {
                "type": "string",
                "description": "The UTC end time for the request.",
                "format": "date-time",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ReadTagDataRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "Base class for requests that query tags for data.",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "tags"
            ],
            "properties": {
              "tags": {
                "type": "array",
                "description": "The tag names or IDs to query.",
                "maxItems": 100,
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "WriteTagValueAnnotationResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WriteOperationResult"
          },
          {
            "type": "object",
            "description": "Describes the result of a tag value annotation write operation.",
            "additionalProperties": false,
            "required": [
              "tagId",
              "annotationId"
            ],
            "properties": {
              "tagId": {
                "type": "string",
                "description": "The ID of the tag that the annotation operation was performed on.",
                "minLength": 1
              },
              "annotationId": {
                "type": "string",
                "description": "The annotation ID.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "GetTagPropertiesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageableAdapterRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to retrieve tag property definitions.",
            "additionalProperties": false
          }
        ]
      },
      "TagDefinition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagSummary"
          },
          {
            "type": "object",
            "description": "Describes a tag definition.",
            "additionalProperties": false,
            "properties": {
              "states": {
                "type": "array",
                "description": "The discrete states for the tag. If DataType is not \nInt32, this property will be null.",
                "items": {
                  "$ref": "#/components/schemas/DigitalState"
                }
              },
              "supportedFeatures": {
                "type": "array",
                "description": "The adapter features that can be used to read data from or write data to this tag.",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "properties": {
                "type": "array",
                "description": "Bespoke tag properties.",
                "items": {
                  "$ref": "#/components/schemas/AdapterProperty"
                }
              },
              "labels": {
                "type": "array",
                "description": "Labels associated with the tag.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "DigitalState": {
        "type": "object",
        "description": "Describes a digital state associated with a tag.",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The state name.",
            "minLength": 1
          },
          "value": {
            "type": "integer",
            "description": "The state value.",
            "format": "int32"
          }
        }
      },
      "TagSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagIdentifier"
          },
          {
            "type": "object",
            "description": "Describes summary information about a tag.",
            "additionalProperties": false,
            "properties": {
              "description": {
                "type": "string",
                "description": "The tag description.",
                "nullable": true
              },
              "units": {
                "type": "string",
                "description": "The tag units.",
                "nullable": true
              },
              "dataType": {
                "description": "The tag data type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/VariantType"
                  }
                ]
              }
            }
          }
        ]
      },
      "TagIdentifier": {
        "type": "object",
        "description": "Defines basic information for identifying a real-time data tag.",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the tag.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The tag name.",
            "minLength": 1
          }
        }
      },
      "FindTagsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PageableAdapterRequest"
          },
          {
            "type": "object",
            "description": "Describes a tag search query.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "The tag name filter.",
                "nullable": true
              },
              "description": {
                "type": "string",
                "description": "The tag description filter.",
                "nullable": true
              },
              "units": {
                "type": "string",
                "description": "The tag units filter.",
                "nullable": true
              },
              "label": {
                "type": "string",
                "description": "The tag label filter.",
                "nullable": true
              },
              "other": {
                "type": "object",
                "description": "Additional filters on bespoke tag properties.",
                "nullable": true,
                "additionalProperties": {
                  "type": "string"
                }
              },
              "resultFields": {
                "description": "The result fields to populate in the search results.",
                "default": "All",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TagDefinitionFields"
                  }
                ]
              }
            }
          }
        ]
      },
      "TagDefinitionFields": {
        "type": "string",
        "description": "Indicates which parts of a TagDefinition to populate when returning the \nresults of a FindTagsRequest.",
        "x-enumFlags": true,
        "x-enumNames": [
          "BasicInformation",
          "DigitalStates",
          "Properties",
          "Labels",
          "SupportedFeatures",
          "All"
        ],
        "enum": [
          "BasicInformation",
          "DigitalStates",
          "Properties",
          "Labels",
          "SupportedFeatures",
          "All"
        ]
      },
      "GetTagsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to get tag definitions by tag ID or name.",
            "additionalProperties": false,
            "required": [
              "tags"
            ],
            "properties": {
              "tags": {
                "type": "array",
                "description": "The IDs or names of the tags to retrieve.",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "TagValueQueryResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagDataContainer"
          },
          {
            "type": "object",
            "description": "Describes a value returned by a tag value query.",
            "additionalProperties": false,
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "description": "The tag value.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TagValueExtended"
                  }
                ]
              }
            }
          }
        ]
      },
      "TagValueExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagValue"
          },
          {
            "type": "object",
            "description": "Describes a real-time or historical value on a tag.",
            "additionalProperties": false,
            "properties": {
              "notes": {
                "type": "string",
                "description": "Notes associated with the value.",
                "nullable": true
              },
              "error": {
                "type": "string",
                "description": "An error message associated with the value.",
                "nullable": true
              },
              "properties": {
                "type": "array",
                "description": "Additional value properties.",
                "items": {
                  "$ref": "#/components/schemas/AdapterProperty"
                }
              }
            }
          }
        ]
      },
      "TagValue": {
        "type": "object",
        "description": "Describes the base set of properties for a tag value sample.",
        "additionalProperties": false,
        "properties": {
          "utcSampleTime": {
            "type": "string",
            "description": "The UTC sample time for the value.",
            "format": "date-time"
          },
          "value": {
            "description": "The value for the sample.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Variant"
              }
            ]
          },
          "status": {
            "description": "The quality status for the value.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TagValueStatus"
              }
            ]
          },
          "units": {
            "type": "string",
            "description": "The value units.",
            "nullable": true
          }
        }
      },
      "TagValueStatus": {
        "type": "string",
        "description": "Describes the quality status of a tag value.",
        "x-enumNames": [
          "Bad",
          "Uncertain",
          "Good"
        ],
        "enum": [
          "Bad",
          "Uncertain",
          "Good"
        ]
      },
      "ReadSnapshotTagValuesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadTagDataRequest"
          },
          {
            "type": "object",
            "description": "Describes a request for snapshot (i.e. instantaneous) tag values.",
            "additionalProperties": false
          }
        ]
      },
      "RawDataBoundaryType": {
        "type": "string",
        "description": "Describes a boundary type used when making a raw data query.",
        "x-enumNames": [
          "Inside",
          "Outside"
        ],
        "enum": [
          "Inside",
          "Outside"
        ]
      },
      "ReadRawTagValuesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadHistoricalTagValuesRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to retrieve raw tag values.",
            "additionalProperties": false,
            "required": [
              "sampleCount",
              "boundaryType"
            ],
            "properties": {
              "sampleCount": {
                "type": "integer",
                "description": "The maximum number of samples to retrieve per tag. A value of less than one is interpreted \nas meaning no limit. The adapter that handles the request can apply its own maximum limit \nto the query.",
                "format": "int32",
                "default": 500
              },
              "boundaryType": {
                "description": "The boundary type to use for the query. This controls if only values inside the query time \nrange should be included in the result, or if the values immediately before and immediately \nafter the query time range should be included.",
                "default": "Inside",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RawDataBoundaryType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ReadPlotTagValuesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadHistoricalTagValuesRequest"
          },
          {
            "type": "object",
            "description": "Describes a request for visualization-friendly tag values.",
            "additionalProperties": false,
            "required": [
              "intervals"
            ],
            "properties": {
              "intervals": {
                "type": "integer",
                "description": "The number of time intervals to use in the query. While the sample count may vary according \nto the implementation of the adapter handling the query, callers should expect to receive \na number of samples equal to up to 4-5x the interval count.",
                "format": "int32",
                "maximum": 2147483647.0,
                "minimum": 1.0
              }
            }
          }
        ]
      },
      "ReadTagValuesAtTimesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadTagDataRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to retrieve tag values at specific sample times.",
            "additionalProperties": false,
            "required": [
              "utcSampleTimes"
            ],
            "properties": {
              "utcSampleTimes": {
                "type": "array",
                "description": "The UTC sample times to retrieve values at.",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ]
      },
      "ProcessedTagValueQueryResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagValueQueryResult"
          },
          {
            "type": "object",
            "description": "Describes a value returned by a tag value query for processed data.",
            "additionalProperties": false,
            "required": [
              "dataFunction"
            ],
            "properties": {
              "dataFunction": {
                "type": "string",
                "description": "The data function used to aggregate the tag value.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ReadProcessedTagValuesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReadHistoricalTagValuesRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to retrieve processed (aggregated) tag values.",
            "additionalProperties": false,
            "required": [
              "dataFunctions",
              "sampleInterval"
            ],
            "properties": {
              "dataFunctions": {
                "type": "array",
                "description": "The aggregate data functions to request.",
                "minItems": 1,
                "items": {
                  "type": "string"
                }
              },
              "sampleInterval": {
                "type": "string",
                "description": "The sample interval to use in the aggregation.",
                "format": "time-span",
                "minLength": 1
              }
            }
          }
        ]
      },
      "DataFunctionDescriptor": {
        "type": "object",
        "description": "Describes a data function that is supported when making a call for processed historical data.",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The function ID.",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The function display name.",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "The function description.",
            "nullable": true
          },
          "sampleTime": {
            "description": "The method used to compute the sample time for a calculated value.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataFunctionSampleTimeType"
              }
            ]
          },
          "status": {
            "description": "The method used to compute the quality status for a calculated value.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataFunctionStatusType"
              }
            ]
          },
          "properties": {
            "type": "array",
            "description": "Bespoke properties associated with the data function.",
            "items": {
              "$ref": "#/components/schemas/AdapterProperty"
            }
          },
          "aliases": {
            "type": "array",
            "description": "Aliases that can also be used to identify this function.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DataFunctionSampleTimeType": {
        "type": "string",
        "description": "Describes how the sample time for a data function calculation is computed.",
        "x-enumNames": [
          "Unspecified",
          "StartTime",
          "EndTime",
          "Raw",
          "Custom"
        ],
        "enum": [
          "Unspecified",
          "StartTime",
          "EndTime",
          "Raw",
          "Custom"
        ]
      },
      "DataFunctionStatusType": {
        "type": "string",
        "description": "Describes how the quality status for a data function calculation is computed.",
        "x-enumNames": [
          "Unspecified",
          "PercentValues",
          "PercentTime",
          "Custom",
          "Raw",
          "AlwaysGood",
          "WorstCase"
        ],
        "enum": [
          "Unspecified",
          "PercentValues",
          "PercentTime",
          "Custom",
          "Raw",
          "AlwaysGood",
          "WorstCase"
        ]
      },
      "GetSupportedDataFunctionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "A request to get the data functions that are supported by an adapter.",
            "additionalProperties": false
          }
        ]
      },
      "WriteTagValueResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WriteOperationResult"
          },
          {
            "type": "object",
            "description": "Describes the result of a tag value write operation.",
            "additionalProperties": false,
            "required": [
              "tagId"
            ],
            "properties": {
              "correlationId": {
                "type": "string",
                "description": "The optional correlation ID for the operation.",
                "nullable": true
              },
              "tagId": {
                "type": "string",
                "description": "The ID of the tag.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "WriteTagValuesRequestExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WriteTagValuesRequest"
          },
          {
            "type": "object",
            "description": "Describes a request to write snapshot or historical tag values.",
            "additionalProperties": false,
            "required": [
              "values"
            ],
            "properties": {
              "values": {
                "type": "array",
                "description": "The values to write.",
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/WriteTagValueItem"
                }
              }
            }
          }
        ]
      },
      "WriteTagValueItem": {
        "type": "object",
        "description": "Describes a value being written to a tag.",
        "additionalProperties": false,
        "required": [
          "tagId",
          "value"
        ],
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "An optional correlation ID to assign to the write operation.",
            "nullable": true
          },
          "tagId": {
            "type": "string",
            "description": "The tag ID.",
            "minLength": 1
          },
          "value": {
            "description": "The tag value.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TagValue"
              }
            ]
          }
        }
      },
      "WriteTagValuesRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AdapterRequest"
          },
          {
            "type": "object",
            "description": "A request to write tag values to an adapter.",
            "additionalProperties": false
          }
        ]
      }
    }
  }
}